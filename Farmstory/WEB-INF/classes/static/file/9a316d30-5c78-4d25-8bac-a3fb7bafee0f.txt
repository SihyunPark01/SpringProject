--------------------------------------------------------------------------------------------8/3(화) 방학 후 새로이 다시 시작 1일차
1교시 ) 사전평가 및 OT

원래 우리 수업의 비중이 80%가 빅데이터네...
공부전략 - 전체적으로 해봐라.. 되든 안되든 취업해야함..  확고한 목표가 있어야함.. 
빅데이터 AI 머신러닝 이쪽은 대학원 진학하는게...
취업을 위해선 프로그래밍 개발쪽을..해야함


데이터 아키텍처와 분석 프로그래밍 + 웹 응용 어플리케이션 개발 + 빅데이터 플랫폼 개발

빅데이터 : 엔지니어링 > 분석(프로그래밍 개발이 베이스가 되어야함)

전공공통 - 파이썬 자바 리눅스(운영체제) 데이터베이스 HTML/CSS 자바스크립트
전공기본 - JSP 게시판프로젝트 사이트프로젝트        vs           빅데이터시스템구축 수집/저장/처리/탐색 R
전공심화 - 스프링 게시판 쇼핑몰                vs                  머신러닝기반데이터분석 딥러닝기반데이터분석 대용량데이터처리플랫폼구축
프로젝트 


2교시 )
- 매주 금요일 오전 수행평가 (총 21번의 수행평가, 지금 11번 남았음)
- 이수자평가 인터뷰 있을 것임
- 정보처리기사 자격증 취득 목표로 하기
- 빅데이터분석기사 자격증 특강해주신대~~~! 자격증따자~~~!!!!!!

# 자바로 데이터베이스와 연동되는 웹, 앱 개발 # -> 취업의 길!!!

오전 - 프로그래밍
오후 - 빅데이터 로 수업진행예정.

* 계정만들기 : 설정-  계정 - 가족 및 다른 사용자 - 사용자추가 - 로그인할필요없고 바로 설정 
* 바탕화면 아이콘 설정 :  우버튼 - 개인설정 - 테마 - 아이콘설정

* 이클립스 다운 -  이클립스 사이트에 download package -  Eclipse IDE for Enterprise Java and Web Developers 개발자는 이거 다운받아야 함.

* 파일탐색기 : 윈도우+E 키  보기 - 옵션 -  확장자숨기기 해제 및 숨김파일 다 보이도록 설정하기




3교시 )

파일 - new - dynamic web project 로 ch01만들었지 그럼 톰캣 자동 뜨고 만들어져. 
src - main - webapp에 new로 jsp파일 하나씩 만들면 돼
window-web browser-chrome으로 바꿔서 설정해주기
템플릿 설정 방법 : window-web-jsp files-templates-html5요고 edit해서 템플릿 설정해주기

(보충설명)
자바 -> JSP -> Spring 순으로 배움
(JSP - 자바 서버 페이지 )
웹페이지(client가 요청) ---- request(html) & response ---- server(WAS(Tomcat) - ch01 - hello.jsp 를 실행하면 hello.html이 되고 이걸 client에게 전달)


4교시 )
./ : 현재 경로(디렉토리)를 의미
../ : 상위 디렉토리
/context root/~~~ : 


notepad++ : 간단한 편집툴
github 가입함
git 설치함


Workspace는 local repository (로컬저장소)
github는 원격저장소 
두개를 동기화시키기

Git 기본 사용법

1) Local repository를 생성
# git init

2) Git이 버전관리 대상 파일들의 상태 확인
# git status

3) 버전 관리할 파일들을 추가
# git add 파일명

4) commit 메시지를 작성
# git commit -m "메시지내용"

만약 최조 사용자 등록이 안되었으면 
# git config --global user.emai l "github 등록한 본인 이메일"
# git config --global user.name "아무거나"
입력 후  사용자 등록 해줘야 Commit 됨

5) remote repository를 등록
# git remote add origin "remote repository 주소"

6) commit 한 내용을 remote repository에 push( 업로드 )
# git push origin master

* Jsp 폴더 안에서 우버튼 git bash here 들어가서 위의 내용처럼 명령문 입력 - 로그인창뜨면 로그인하면됨

* git add ch명 -> git commit -m "메시지내용" -> git push origin master

-------------------------------------------------오후 빅데이터 수업-----------------------------------------------------
5교시 ) 프린트자료주심 
 
(보충설명)
* 데이터베이스 이점
-데이터의 중복최소화, 불일치문제해결, 쉽게 공유가능, 정보표준화, 보안성 제공, 무결성이 유지됨, 대량빠르게검색, 다양한데이터관리, 애플리케이션 개발쉬움.

하이디sql로 진행중.

backtick : ` ` (~표시키)
all : *

6교시 )

하이디sql로 소스 연습
깃허브 계속해서 연동하는 것 연습
개발자들 깃허브를 자신의 포트폴리오로 많이 활용하는 중


7교시 )
하이디sql로 소스 연습 및 확인문제 풀고 깃허브에 업로드


8교시)
- 구글 드라이브 공유문서에서 쌤자료 확인
- github chhak 에서 쌤코딩 확인	



깃허브 깔기, 구글드라이브접속 



--------------------------------------------------------------------------------------------8/4(수) 2일차----------------------------------
1교시)2_1~2_3
이클립스 jsp계속... 
<% 이거 자체가 스크립트릿, 여기에 자바문법 입력
>%
표현식 <%= 자바변수 %>
표현식에서는 세미콜론;을 쓰지 않는다.
약간 자바문법만 <% %>이걸로 감싸네 마치 ++로 감싸는 것처럼.

ctrl+alt+방향키아래로 : 자바문법복사
ctrl+d : 삭제

웹사이트에서 f12눌러 최종출력문도 확인할 것.

jsp다하고나서 깃허브에 올리기~~!

<%...%>가 JSP 코드인데
<%...%>이 태그 안에 있는 Java 코드를 스크립틀릿(scritlet)이라고 한다.




2교시) 2_4~ 2_5 후 3_1까지 (클래스, 인클루드, 리퀘스트 ing)

class는 src/main/java폴더에다 만들고
jsp파일은 webapp폴더에다 만들자~!

include파일은 inc폴더 따로 만들어서 jsp파일 모으자~~~! 헤더나 푸터같은거 모듈화하기위해 폴더따로만들어서 관리

parameter 개념 카톡에 사진확인
데이터를 서버로 전송하는 방식 : Get이라고 함 카톡사진확인





3교시) Request굉장히 중요한것

3-1은 proc폴더 따로 만들어서 웹에서 받아오는 정보들 관리하는 파일 
예를 들어 request.jsp에서 로그인하는거 구축했다면 그 로그인정보를 받아오는 파일이 proc안의 loginProc임~~!

request객체를 통해 클라이언트의 전송데이터(파라미터)를 수신함

일단 request.jsp에는 form을 만들고
proc.jsp에다가 <% 열고 
request.setCharacterEncoding("UTF-8")기본적으로 설정해 주고
데이터를 수신하는데 이때 
"    자료형타입 변수 = request.getParameter("값이름");     "
"    자료형타입 변수 = request.getParameter("값이름");     "
"    자료형타입 변수 = request.getParameter("값이름");     " 받아올 값의 개수만큼~~ 타이핑!

이후 표현식으로 출력해주고 

뒤로가기 링크도 만들어줘보는것임.

만약 도출할 값이 여러개이면 배열을 활용하고 for확장문을 활용해야 함.
그리고 성별같은 경우엔 삼항연산식 쓰면 됨.



4교시) 복습 및 jsp교재 예제 연습시간 - 깃허브에 JspBook으로 업로드되어있음

- JSP페이지는 <body>에다   표현식 <%= "~~~~~~~~~" %> 으로 출력문 작성한다!
- JSP 란 JavaServer Pages 의 약자이며 HTML 코드에 JAVA 코드를 넣어 동적웹페이지를 생성하는 웹어플리케이션 도구이다.
	JSP 가 실행되면 자바 서블릿(Servlet) 으로 변환되며 웹 어플리케이션 서버에서 동작되면서 필요한 기능을 수행하고
	그렇게 생성된 데이터를 웹페이지와 함께 클라이언트로 응답한다.
- 웹어플리케이션(Web Application)
	웹어플리케이션은 웹에서 실행되는 응용프로그램을 뜻하며 인터넷을 통한 은행업무, 인터넷쇼핑, 등등 인터넷에서 하는 여러 서비스를 총칭
	하며 사용자가 필요한 요청(Request) 를 하고 서버에서는 이에 해당하는 요청을 수행하고 그리고 요청한 데이터를 응답(Response) 한다.
	웹 어플리케이션이 위와 같이 동작하기 위한 몇가지 구성요소가 있다.
	웹 브라우저(Web Browser) : 클라이언트에서 요청을 하고 전달받은 페이지를 볼수있는 환경을 말한다.  ( 크롬, IE, Safari, Firefox 등.. )
	웹 서버(Web Server)  : 클라이언트로 부터 요청받아 서버에 저장된 리소스를 클라이언트 에게 전달한다. 주로 정적컨텐츠롤 담당한다.
	웹 어플리케이션 서버 ( Web Application Server ) : 줄여서 was 라고도 부르며 서버단에서 필요한 기능을 수행하고 그결과를 웹서버에게 전달한다.
	데이터베이스 : 서비스에 필요한 데이터를 보관, 갱신 등 관리를 한다.

- 자바 서블릿(Java Servlet)
	서블릿이란 웹페이지를 동적으로 생성하기 위해 서버측 프로그램을 말한다. 
	이는 자바 언어를 기반으로 만들지며 웹 어플리케이션 서버 ( Web Application Sever ) 위에서 컴파일 되고 동작한다.

- JSP 와 서블릿
	JSP 와 서블릿의 차이점은 결과적으로 하는일은 동일하지만 
	JSP 는 HTML 내부에 JAVA 소스코드가 들어감으로 인해 HTML 코드를 작성하기 간편하다는 장점이있으며
	서블릿은 자바코드내에 HTML 코드가 있어서 읽고 쓰기가 굉장히 불편하기 때문에 작업의 효율성이 떨어진다.

--------------------------------------------------------------------------------------------------------------
5교시~8교시) 하이디sql + 프린트자료로 예제 실습

오늘 sql문 연습 많이 해야할 듯.
프린트보고 코딩하고 결과보면서 이해할 것.
내일 sql문 예제 문제들 많이 풀거기때문에 오늘 연습 많이 해야 함.



--------------------------------------------------------------------------------------------8/5(목) 3일차----------------------------------
1교시)

get~~~정보를 가져오는것
set~~~정보를 지정해서 보낼준비

프로토콜은 http, http통신은 한번 연결하고 응답받으면 끝남

<a href="./proc/redirectPage.jsp"> 블라블라  ->블라블라라는 링크 만드는 거구나

경로설정시 ./인지 ../인지 요런것들 잘 체크할 것



client -------- request --------> server
        <------ response -------	
server에서 redirect 


같은 페이지인데 주소가 다르지? 이게 포워드처리라는거담마!

http://localhost:8181/ch03/3_1_Request.jsp
http://localhost:8181/ch03/proc/forwardPage.jsp

리다이렉트, 페이지컨텍스트, 포워드 기능 3개 배웠음


2교시) 세션

server라는 시스템에 tomcat객체가 있잖아? 이게 application임. 객체를 이해하기 위해선 도식화하는게 굿굿

우리가 클릭할 때마다 무수히 많은 request와 response들이 일어나지 이 전체의 기간을 session이라고 부를 수 있음.

서버는 Session table을 생성해두지

무수히 많은 클라이언트들이 서버에 요청할때 서버는 각각의 클라이언트들에게 번호표를 준다, 그리고 client들도 response할때 객체와 함께 
번호표를 다시 보내면 Session table에서 확인해서 처리해주는 것임.

웹페이지에서 f12열어서 상단메뉴 application에 Storage에 cookies를 보면 발급받은 번호표가 나옴ㅋㅋ



3교시 ) 

세션과 쿠키는 짝!
쿠키 - 작은 조각 파일들
쿠키(Cookie) 서버가 클라이언트에게 쿠키값을 보내줌. 쿠키값을 분석해서 원하는 정보 팝업으로 막 띄어줌.
쿠키파일도 세션테이블처럼 브라우저에 내장테이블로 저장. 하지만 보안문제때문에 쿠키테이블(클라이언트->-<서버)보다는 세션테이블(서버)로 관리하는 게 좋음.

http통신의 치명적인 단점 - 연결이 지속되지 않음(stateless) 그래서 쿠키파일이 필요함


4교시) 
JSP 교재 예제 실습하기 (p140~p168)
github에 올리기
궁금한 내용 질문하기


--------------------------------------------------------------------------------------------
5,6교시 SQL 실습과제 수행

jar : java의 라이브러리파일

mysql사이트에서 connectorj(5버전) 다운받아서 jar복사해서 ch04에 WEB-INF에 lib에 복사붙여넣기하면됨 
그 이후 어떻게 하는지 카톡사진과 이클립스 파일 설명을 통해 수행할것.

카톡 많이 확인하세요!!!



--------------------------------------------------------------------------------------------8/6(금) 4일차----------------------------------
1교시)
JSP 이클립스  4_2_Select문 DB연동 및 웹에 결과값 처리 완료 (카톡사진 처음~6개)

2교시~4교시)
update delete 처리시키는 방법

-------------------------------------------------------------------------------------------
5~8교시)
자습 및 이전 수행평가 제출






------------------------------------------------------------------------------------------------------8/9(월) 2주 1일차 : JSP마무리 + 파이썬 끝낼것임

1교시) Json함 에이젝스??? 상당히 중요 ㅋㅋㅋ / Json / 크롬 웹스토어에서 json viewer 설치 / maven repository에서 gson 설치
json data는 contenttype에서 "application/json; 으로 바꾸고 시작해야겠지?
- 크롬 웹스토어에서 json viewer 다운받아서 설치한 후 나오는 결과값이 바로 json data임
- maven repository에서 gson jar 파일 다운받아서 WEB_INF의 lib에 붙여넣기하면 라이브러리 사용준비 완료
- 여기까지가 client가 server에게 데이터를 달라고 요청한 상태 

- Json이 xml보다 용량을 훨씬 적게차지해서 요샌 이걸 더 많이 쓴대. 
- ajax 	자바스크립트를 이용해 서버와 브라우저가 비동기방식으로 데이터를 교환할 수 있는 통신기능, json객체를 이용해 페이지 일부만을 리로드할 수 있는 기법. (즉 페이지 전체를 새로고침하지않기위해)
json형태로 필요한 데이터만 받아서 갱신하기 때문에 그만큼의 자원과 시간을 아낄 수 있음
ajax를 활용하면 클라이언트에서 서버로 데이터를 요청하고 그에 대한 결과를 돌려받을 수 있음



2교시) 3. Json : DB데이터를 Jsondata로 변환시켜서 출력하기
- 똑같이 try-catch문 써서 DB연동은 똑같이 하면 됨 (bean클래스 만들고 게터세터 처리하는거 알지?)
- list구조를 Json데이터로 변환 선언
- Json 출력문 (client로 전송)

3교시) 4~5. AJAX +  DB연동
- <title>밑에 <script>선언하기
<script>
	1. 제이쿼리문의 시작 : $(document).ready(function(){
		2. 데이터 출력 태그객체 선택 : var tds = $('tr > td:nth-chile(2)');
		3. 버튼이벤트 구현			: $(button).click(function(){
			4. Ajax통신(데이터요청) Ajax함수 기본옵션4개
			$ajax({
				url: ' ./5_1_Json.jsp(주소) ',
				type:' get ',
				dataType: ' json(파일형식) ',
				success: function(data){ data라는 변수속에 5_1_json에 있는 변수들을 빈으로 객체화해서 담음 
					tds.eq(0).text(data.uid);
					tds.eq(0).text(data.uid);
					tds.eq(0).text(data.uid);
					tds.eq(0).text(data.uid);

				}
			});
		});
	});
</script>	

4교시) JSPBook 7장 실습


-------------------------------------------------------------------------------------------------------------
오후수업: 파이썬 시작!

5교시) 파이썬 기본이론 설명
프로그래밍 언어 : 자동화 위해 입력
프로그래밍 결과물: 아마존고(무인스토어), 아마존키바, 무인지하철, 무인자동차 등 대리운전,택시운전사 다 없어질예정......
전기자동차가 훨씬 무인자동화하기 쉽잖어....

파이썬 : 플랫폼독립적, 인터프리터언어(자바는 컴파일러언어(101010기계언어로 바꿔)잖아? 인터프리터언어는 기계언어로 바꿀필요없이 바로 번역)
	객체지향언어 / 다양한 라이브러리 제공 / 쉽고간단편리 /  단 웹프로그래밍은 조금 안맞는듯...
웹은 JSP가 표준이니까 JSP를 배워는 놔야돼... 

금욜오후마다 코딩테스트 연습해볼거야~~~~~~! 파이썬으로~!

python 다운 & pycharm 다운


file-setting-wheel검색

6교시)

파이참 열어서 해야돼~~~!!!
파이썬 기본개념들~~~

7교시~8교시)
파이썬 기본개념들 마무리 후 책 예제 연습






---------------------------------------------------------------------------------------8/10(화) 2주 2일차 : 게시판 만들기

1교시) 게시판 흐름 (카톡사진)

-  게시판 모델3가지 만들어볼것임
-  jsp css html javascript

- 개발의 흐름 : 1. 기획 - [ 2. 디자인(html css) - 3. 개발 ]- 4. 테스트 - 5. 배포

디자인부터 실행! 디자인하기에 이클립스는 불편해...그래서 프론트엔드에서 많이 사용하는 툴 설치 : vscode  (오!써봤잖아 ㅎㅎㅎ)

vscode로 먼저 폴더 및 html 생성하기

처음 세팅 : ! + enter

한줄삭제 컨 쉬 k
한줄복사 알 쉬 아래화살표

플러그인 '라이브 서버' 설치하기 그래야 open with live server 열림

* : 모든태그

디자인 후 스타일 : <title>밑에서 <style> 지정하는거 알지? 근데 보통 이 스타일을 css파일로 따로 만들어서 style 폴더에 저장함 ------------------------------T아카데미에서 강의 듣ㄱㅣ

가운데정렬 : margin: 100px auto;

padding: 20px 20px 20px 50px; (12,3,6,9시 방향의 패딩 줌)



2교시) 게시판 만들기 계속...
vscode 이용
틀잡는것을 마크업이라 하는군
그 이후에 스타일 적용시키는 거고


3교시) 게시판 만들기 계속...
vscode 이용


4교시) vscode로 디자인했던 Jboard를 이클립스에서 작업하기 (보통 디자이너가 Jboard같은 폴더를 던져주겠지? 그 이후 개발자로서 내가 해야 할 작업!)

이클립스에 'Jboard'로 web dynamic project 만들어서 폴더 안에 있던 파일들 모두 webapp에다 붙여넣기

1. 모든 html 파일 열어서 JSP 페이지 지시자 모두 추가해주기 (<%@ page contentType="text/html;charset=UTF-8" pageEncoding="UTF-8"%>)

2. 그 후 모든 html확장자를 jsp로 바꿔주기

* DB를 웹페이지에 바로 띄워주기위해 하는 작업
3. 하이디sql로 게시판에 삽입할 테이블들 작성
create table `테이블명`(
	`컬럼명1` 	자료형타입() primary key,
	`컬럼명2` 	varchar(20) default 0,
	`컬럼명3` 	char(13) unique,
	`컬럼명4` 	tinyint  default 'free',
	`컬럼명5` text(엄청 긴 글일땐 varchar로 안됨, text 선언해줘야함) 
);

비밀번호는 평문이 아닌 암호화시켜서 작성하게 할 것이므로 varchar(255)로 설정
중복허용안됨 : unique
자동생성 :  auto_increment 얘가 보통 primary key로 설정됨

여기까지 끝냄 수요일 계속 진행!
------------------------------------------------------------------------------------------------------------------
5교시~8교시 )  파이썬 진행~!!~~  
CH03 조건문 if 반복문 while for /
CH04 자료 구조 : 연산하기위한! 자바에서 Collection과 같은 List, Set, Dictionary, Tuple이 있었지? 카톡에 사진을 보면 배열이 어떻게 이루어지는지 알 수 있음

List[1, 2, 3, 4, 5] 
Set 은 주머니에 담기는거지 중복 안되고 순서 없음
Dictionary(딕트)는 Map이랑 같은거라 key값으로 value를 도출할 수 있음
Tuple은 수정이나 삭제, 추가가 안되는 배열임.



--------------------------------------------------------------------------------------8/11(수) 2주 3일차
1교시 ) 게시판 만들기 계속~ 이클립스로 DB연동중

- bean클래스 만들때 패키지명은 도메인명 역순으로 만드는 경우가 많음

- 약관페이지 DB연동후

- 동의합니다 체크를 해야 넘어갈 수 있게끔 하는 작업 -> 자바스크립트로! 알지? <title>밑에 <script></script> 넣어주고 $로 시작하는 jquery함수 선언 시작.


2교시) 약관 동의 클릭 후 넘어가기 회원가입 입력하면 DB로 데이터 전송까지


3교시) 아이디 중복체크 설정 -----checkUid.jsp를 만들어서 DB와 연동시켜 DB자료를 조회하게 할 것. select count()선언문을 사용하여 중복되는 아이디가 있으면 1, 없으면 0으로 도출될것임
이번엔 3단계에서 PreparedStatement를 선언해보았음. 이땐 3단계에서 쿼리문을 작성해줘야함.
result의 값(0또는 1)을 json 데이터로 출력할것임
register페이지에서 ajax활용!하여 마무리...

4교시) 똑같은 방식으로 닉네임, 이메일, 폰번호 등등 중복체크 설정하기


점심시간) JSP Book 시험대비하기
서블릿 : 자바 언어를 기반으로 하는 동적 웹 페이지 작성을 지원함
JSP :  서블릿보다는 자바에게 덜 의존적임. JSP는 실행시 서블릿으로 변환됨. 


HTML의 웹 페이지 기술방식: <div>를 사용해 영역 구분, 
css: 화면에 HTML의 태그를 표현 / css3: HTML태그표현 + 자바스크립트의 역할도 조금 
js: 처리나 서버에 요청 작업
<header> 사이트 소개나 내비게이션 등 표시
<nav> 내비게이션 항목
<footer>뭔지 알지?
<a href="">링크거는 속성
<label> 메뉴태그에서 메뉴명을 지정
<input type=""> 요거 많이 활용함


JSP의 구성요소 : <% 스크립트릿 %> <%= 표현식%>
주석 달때는 html주석은 <!-- -->, jsp주석은 <%-- -->

JSP제어문: if문 : if ( 조건 ) { 처리할결과값; } , for문, while문 모두 자바랑 똑같음



Ajax (비동기적 통신) : 웹 브라우저는 요청을 송신하면 응답을 기다리지 않음, 서버는 필요한 데이터만을 응답함.
Ajax의 대표적인 라이브러리가 jQuery(자바스크립트 라이브러리(프레임워크))임!!!

jQuery google 쳐서 그 <script>긁어와서 라이브러리 복사해넣고 먼저 기술해야 함
<title>밑에 <script>로 선언하는 그 부분임.
jQuery시작문 : 	$(document).ready(function(){}); 해당 페이지가 완전히 로딩되면 실행되는 것.
		$("button").click(function(){}); 버튼태그를 클릭하면 실행되는 것

jQuery는 HTML 엘리먼트를 선택해 선택한 엘리먼트에 어떤 동작을 수행시킴. $(selector).action() 			******************Jsp book 7,8,9장 공부하기


----------------------------------------------------------------------------------------------------------
5교시~6교시) 파이썬 함수 Ch05_1~_4까지

7교시~8교시) 파이썬 계속~ 책 p102까지 끝냄


---------------------------------------------------------------------------------------------------------8/12(목) 2주 4일차
1~4교시 ) 이클립스 오늘꺼 꼭 복습하기 조낸 어려움 ㅋㅋㅋ

- 중복체크 script는 js폴더 만들어서 자바스크립트파일로 만들어서 소스 옮겨두고! 링크 주석 달기!!!
- 주소검색부터 시작.
- 주소검색API를 활용할거래 - 다음 우편번호 서비스 - 오픈소스, 매뉴얼읽고 사용방법 확인
- 붙여넣고 수정 후 자바스크립트파일로 만들어서 옮겨준 뒤

- Validation유효성검증 단계가 필요함 - 해커들 걸러야지, 이름은 한글로, 비번은 꼭 영문, 숫자, 특수문자가 들어가야 함 등등 조건을 걸어야됨. 이메일로 인증번호 받아오기, 휴대폰인증번호 받아오기

원래  register.jsp에서 <script>작업으로 했었는데 이걸 checkUser.js라는 자바스크립트파일을 만들어서 옮겨줬음
아이디, 비밀번호, 이름, 닉네임 유효성검사 작업을 했음. 정규표현식을 활용하여. 
모든 작업 후 Validation.js에다 옮기고 <script src~~~~>로 대체해서 적어줌 
zipcode도 따로 생성.

DBConfig라는 클래스를 만든 이유가 DB정보생성을 위해 일일히 다 new객체 생성하기엔 메모리부족, 유지보수 불편함 때문에
싱글톤 객체로 만들어줬음. 얘는 .getInstance()로 불러오는 것임.
고정값은 final붙여줌
각 DB정보1~2단계 써넣은 jsp파일들에 이제 바꿔쓰기 해줘야지
1~2단계를 Connection conn = DBConfig.getInstance().getConnection(); 으로 선언해주기



5~8교시) 파이썬 끝냄 + 프린트 문제 풀이!




---------------------------------------------------------------------------------------------------------8/13(금) 2주 5일차
1교시) 게시판 만들기ing
<로그인 화면 구축>
- login.jsp 열어 submit누르면 uid와 pass를 보낼 form action에 있는 링크를 설정해야지? loginProc으로 보낼거야
- proc폴더에 loginProc.jsp 만들어서 DB에서 조회할 준비! try catch문 알지? 1,2단계 통합했으므로 Dbconfig.~~~로 적어주고
3단계에선 PreparedStatement로 선언. 쿼리문도 db 패키지에 Sql.java여기에 해줄거잖아? 
4단계는 SELECT문이니까 .executeQuery();로~!


<로그아웃> list페이지에서 작업

2교시) 1교시꺼 복습

3교시) 파이썬 프린트 문제

4교시) 파이썬 프린트 문제풀이


`pass`=PASSWORD(?); 비번 암호화

---------------------------------------------------------------------------------------------------------
5~8교시) 파이썬 코딩테스트

- 알고리즘 : 프로그래밍(자바, 파이썬...) + 자료구조(컬렉션, 리스트, 딕셔너리)

 싸피 - 삼성에서 진행하는 코딩연수
부스트캠프 웃테켐

<코딩문제사이트>
백준 온라인 저지
프로그래머스


그리디 문제 : 가장 최선의 방법 찾기, 상식적인 문제




-------------------------------------------------------------------------------------------------지금까지 배운 것 복습

만약 java처럼 클래스만들고싶다면 java폴더에서 java파일만들어서 변수선언, 게터세터선언해서 만들어 준 뒤
jsp파일에는  new 객체 생성 후 스크립틀릿만 만들어주면 웹페이지에 생성됨.





---------------------------------------------------------------------------------------------------------8/16(월) 3주 1일차

1교시)
- centos 다운받아두기 리눅스 운영체제 9GB짜리네...

- 게시판 만들기 시작페이지 만들기 (index.jsp)

- 로그인을 하면 게시판에 글목록이 있어야 하니까 

- 글쓰기 페이지부터 , 선행조건은 로그인을 해야 글 쓸수 있도록 만들어야 함

- write 페이지 만지고, writeProc만들어서 DB에 insert시키는 스크립틀릿 작성


2교시)
- maven repository에 cos다운받아서 lib에 복붙! cos는 결국 파일업로드 편하게 만들어주는 라이브러리.


3교시)
- 파일 크기에 제한을 줘야함 1024 * 1024 * 10

카톡 캡쳐 확인하기
parent는 글번호임

- insert후 바로  SELECT되어야하니까


4교시)
글작성 + 파일첨부까지 .. 오늘꺼 어려워 ㅠㅠ


index.jsp로 시작페이지 처리 - 로그인 안한경우 로그인페이지, 로그인 한 경우 리스트페이지 포워드! 이럴때 포워드처리를 하는것임! pageContext.forward(~~~)

로그인하지않고 write페이지 접근했을때 -> write.jsp에 첫부분 스크립틀릿 추가해야겠지?

write.jsp -> writeProc.jsp 

writeProc.jsp 이해하는데 좀 오래걸릴듯. 얘는 상위폴더에서 proc폴더 만들어준뒤 거기에 writeProc.jsp 

- 파일 첨부되었는지 확인 경로 : C:\Users\bigdata\Desktop\Workspace\Jsp\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\Jboard\file


게시판 만들기만 해두,...웬만한 건 다 만들수 있겠다


--------------------------------------------------------------------------------------------------------
5교시 ) 리눅스 준비 : 센토스로 많이 다운로드 받음.

서버는 대부분 리눅스로 돌림... 오픈 소스 운영체제
하드웨어 CPU RAM HDD
커널 : 리눅스의 핵심
쉘 : 명령해석기 bash쉘
응용프로그램

가상머신 

- virtualbox 다운로드

- virtualbox실행 - 새로만들기 - 2048MB, 20GB 설정
- 설정 - 시스템 - 프로세서 - CPU2개로
- 설정 - 저장소 - cdrom에다가 다운받은 centos를 넣기
>>>>>>>>시작부팅시키기<<<<<<<<<<<<
엔터
시작되면 설정들어가기 - 언어 , 키보드영어까지 설정, 시간설정, 용량ok, root비번, 사용자비번 모두 설정 후 설치 시작.

여기 firefox에서 이클립스다운받아서 실행시켜 봄.



6교시) 리눅스 설치 후 시스템 재시작부터!

터미널이 shell임 cmd같은거

주요 디렉토리
home을 젤 많이 씀
usr - C://programfiles 대체적으로 프로그램이 설치되는 폴더

7교시) 리눅스 환경설정  및 복습

가상머신 /  리눅스운영체제 ..윈도우보단 별로네




-------------------------------------------------------------------------------------------------------- 8/17(화) 3주 2일차

1교시)
- 게시판 글 목록 나타내는 작업 - DB에 저장된 글들 불러와야 함. list.jsp에서 처리.  try~catch문 + sql작성 + 5단계while문 작성위해 ArticleBean클래스 생성(게터세터) + html영역에도 반복문과 표현식으로 변경해줘야함

- DB로 가서 쿼리문 작성. 
article테이블에 글 개수 불리는 작업
INSERT INTO `Jboard_article` (`title`, `content`, `uid`, `regip`, `rdate`)
SELECT `title`, `content`, `uid`, `regip`, `rdate` FROM `Jboard_article`;
반복실행

닉네임 도출 위해 article과 member테이블 join 작업
SELECT a.*, b.nick FROM `Jboard_article` AS a
JOIN `Jboard_member` AS b
ON a.uid = b.uid;



2교시) 페이지작업 - 각 페이지에 10건씩 출력되도록.

서버clean 작업
project - clean 작업 한번씩 실행해주면 문제상황에서 해결가능.

최신글일수록 seq번호가 커짐. 최신글은 상위에 랭크가 되어야 함. 
 

3교시) list.jsp
글번호가 순서	번호로 나오게 만드는 작업
페이지 쪽수 그룹핑 작업 10개씩 표시되도록, 이전 다음으로 옮기기작업
페이지쪽수 현재 페이지에 버튼 색깔 표시
 
로그인했을때 리다이렉트에서 pg=1처리하는거 해줘야함.


4교시) jsp 복습


---------------------------------------------------------------------------------------------

5~8교시) 리눅스 고고
- ll이 정보 보는것
- cd ~







-------------------------------------------------------------------------------------------------------- 8/18(수) 3주 3일차

1교시)view.jsp

- 글쓴거 클릭하면 글이 보이게 하는 작업

- 글읽으면 조회수(hit) 카운트되게하는 작업

2교시) 
- 파일첨부 시 조회수 (left조인)

- 댓글 관리

- 댓글 출력

- 댓글 개수 []에 출력 - 코멘트개수를 카운트해야하니까

3교시)
- 댓글 코멘트 개수 카운트

4교시)
- 리뷰 
오늘집에가서 코드리뷰하자
----------------------------------------------------------------------
5~8교시)
리눅스 계속!
login을 root로 잘 안하는편. 진짜 빠삭하지 않다면. 하지만 root(관리자모드)로 하지 않았을때 불편함이 많다보니.. root로 걍 씀.


rm -f 파일명 -> 파일 강제 삭제

ctrl+alt+f2 : 가상 콘솔

유저 전환 : su 









------------------------------------------------------------------8/19(목) 3주 4일차
1교시)

1. view.jsp에서 html문 처리
- 내가 쓴 댓글만 수정, 삭제 버튼을 노출하는 작업 (다른 사람 글은 수정, 삭제가 노출되면 안됨)
- 내가 쓴 글만 수정, 삭제 버튼을 노출하는 작업 
mb : 로그인한 사용자 정보 객체
comment : 사용자 아이디
따라서 mb객체의 uid와 comment의 uid가 일치하면 사용자가 작성했다는 말. 
- 

2. 댓글 삭제에 대한 deleteComment.jsp를 만들어야함
댓글삭제 -> 리다이렉트 -> 댓글카운트-1

아티클다오에서 delete_comment 클래스와
sql문에서 delete_comment쿼리문을 만들어야 함



********아티클다오에서 updateCommentCount안에 3단계 if문 이해 못 하겠음. type변수를 어떻게 갑자기 선언하지?



seq 댓글번호
parent이댓글의 부모글번호


2교시)
view.jsp
- 댓글 삭제 시 물어봐야지
a태그 취소 : return false;

e넣고 preventDefault()하는 방법이 return false;하는거나 똑같음

- 댓글 수정시 편집모드로 바뀌는 작업 (이게 어렵네)
**************** html문에 class값 주는게 뭔데?
textarea를 편집모드로 (readonly빼면 수정가능해지잖아?)

				((((((((((((((((((((((((요즘은 서버에서 html페이지를 받아오는게 아니라 Json Data를 받아옴))))))))))))))))))))))))))))))))
				이제는 서버에서 페이지를 만들지않고 서버는 데이터만 주고 클라이언트에게 페이지를 만들게끔 함. (리액트 : 클라이언트용 프레임워크)


			<스터디용>
			- 자바 : 컬렉션, 리스트, 맵 부분 + 상속, 인터페이스 / 백엔드쪽은 쿼리문을 많이 아는게 중요...
			- html css은 수업때 하면 될 것 같고, 자바스크립트를 하라!!! 제이쿼리쪽. 회사생활이 편해진다.
			- JSP 랑 자바스크립트(제이쿼리쪽)
			- 웹, 앱개발을 위해 뭐가 필요한지 거꾸로 찾아들어가면 스터디할게 나옴.

- 수정 누르면 하얀박스에 수정모드 뜨게 하는 작업
- 수정하기 와 취소 버튼 생성하는 작업


3교시) 부터 멘붕...... 취소버튼이 안 사라짐.....

- 리소스 캐쉬로 저장해놨다가 재활용. 계속 불러오진 않음. 따라서 개발을 할 때는 캐쉬사용을 멈춰야 함.
- 검사페이지 처리 disable체크


<!--내가_만든_속성명="데이터"-->


4교시) 댓글 수정, 수정완료, 취소 등등등 작업.



view.jsp

<%@page import="java.util.List"%>
<%@page import="kr.co.jboard.bean.MemberBean"%>
<%@page import="kr.co.jboard.bean.ArticleBean"%>
<%@page import="kr.co.jboard.dao.ArticleDao"%>
<%@ page contentType="text/html;charset=UTF-8" pageEncoding="UTF-8"%>
<%
	MemberBean mb = (MemberBean) session.getAttribute("sessMember");

	if(mb == null){
		// 로그인을 하지 않고 view 페이지를 요청했을 때
		response.sendRedirect("/Jboard/user/login.jsp?success=103");
		return;
}
	request.setCharacterEncoding("UTF-8");
	String seq = request.getParameter("seq");
	
	
	ArticleDao dao = ArticleDao.getInstance();
	//조회수 업데이트
	dao.updateArticleHit(seq);
	
	//글 가져오기
	ArticleBean article = ArticleDao.getInstance().selectArticle(seq);

	//댓글 가져오기
	List<ArticleBean> comments = dao.selectComments(seq); //selectComments만들러가자
	
	
%>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>글보기</title>
    <link rel="stylesheet" href="./css/style.css"/>
	
	
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script> <!-- 제이쿼리문라이브러리복사해와야지 -->
	<script>
		$(document).ready(function(){
			
			//댓글 삭제
			$('.btnCommentDel').click(function(){
				var result = confirm('정말 삭제 하시겠습니까?'); //->확인, 취소 버튼 떠야함
				return result;//하면 삭제 처리됨. false하면 a태그 처리 안함.
			});
			
			
			var content = '';
						
			//댓글 수정 (밑에 btnCommnetModify class값 주고 왔음)
			$('.btnCommentModify').click(function(){
				
				var tag = $(this);
				var mode = $(this).text();//내가 선택하는 a태그의 수정버튼이 this임.
				var textarea = $(this).parent().prev();
				
				if(mode == '수정'){
				
					//수정모드	
					content = textarea.val();
					
					$(this).prev().css('display', 'none'); //수정버튼의 형인 삭제버튼을 제거하는 작업. 형은 prev()이군...					
					$(this).next().css('display', 'inline');//a태그의 원래 속성은 inline.
					$(this).text('수정완료');	
					textarea.attr('readonly', false).focus(); //수정버튼 a태그의 parent는 div, textarea는 div의 형임
					textarea.css({
						'background' : 'white',
						'outline' : 'lpx solid gray'
					});
				}else{
					//수정완료 모드
					var seq = textarea.attr('data-seq');
					var comment = textarea.val();
					
					//{}객체표기
					var jsonData = {
							'seq': seq, //댓글번호
							'comment': comment //댓글수정컨텐츠
						};
					
					
				//서버에 수정 요청 전송	
				$.ajax({//ajax함수 내부에서는 $(this)를 실행할 수 없음.
					url: '/Jboard/proc/updateComment.jsp',
					type: 'post', //길이제한이 없는 모드로 post를 하는게 좋음. 댓글은 무한한 길이를 달 수 있으니까.
					data: jsonData, //클라이언트에서 서버로 전송하는 jsonData 지정해주는것.
					dataType: 'json', //서버에서 클라이언트로 전달하는 형식.(서버에서 전달받는 데이터 종류)
					success: function(data){
						if(data.result == 1){
							alert('댓글 수정이 완료되었습니다.');
							escapeModify(tag); 
						}else{
							alert('댓글 수정이 취소되었습니다.');
						}
					}
				});	
			}
					return false;
				
			});

			
			//댓글 수정 취소
			$('.btnCommentCancel').click(function(e){ //클래스 식별은 .으로!
				e.preventDafualt(); //a태그의 링크속성을 무효화, return false랑 똑같은 효과
				escapeModify($(this));
				
				
		//		$(this).parent().attr('readonly', true); //parent는 div, div의 형은 textarea 이건 왜 남아있는것인가.....
			});
			
			// 댓글 수정모드 해제
			function escapeModify(tag) {
				tag.prev().text('수정'); //내가 클릭하는 취소버튼이 this, 이것의 prev()는 형 = 수정완료버튼
				tag.prev().prev().css('display', 'inline');				//취소의 next()는 div니까 삭제버튼
				tag.css('display', 'none'); //취소버튼은 없어져야하므로
			
				//div형 textarea 다시 수정못하게
				var textarea = tag.parent().prev();
    			
    			textarea.val(content);
    			textarea.attr('readonly', true);
    			textarea.css({
    				'background': 'transparent',
    				'outline': 'none'
    			});
			}
			
		});
	
		
	</script>




</head>


<body>
    <div id="wrapper">
        <section id="board" class="view">
            <h3>글보기</h3>
            <table>
                <tr>
                    <td>제목</td>
                    <td><input type="text" name="title" value="<%=article.getTitle() %>" readonly/></td>
                </tr>
                <% if(article.getFile()==1){ %>
                <tr>
                    <td>첨부파일</td>
                    <td>
                        <a href="#"><%= article.getFb().getOriName() %></a>
                        <span><%= article.getFb().getDownload() %>회 다운로드</span>
                    </td>
                </tr>
                <% } %>
                <tr>
                    <td>내용</td>
                    <td>
                        <textarea name="content" readonly><%=article.getContent()%></textarea>
                    </td>
                </tr>
            </table>
            
            
            <div>
            	<% if(mb.getUid().equals(article.getUid())){ %>
                <a href="#" class="btnDelete">삭제</a>
                <a href="/Jboard/modify.jsp" class="btnModify">수정</a>
				<% } %>
                <a href="/Jboard/list.jsp" class="btnList">목록</a>
            </div>  
           
            <!-- 댓글리스트 -->
            <section class="commentList">
                <h3>댓글목록</h3>
                
                <% for(ArticleBean comment : comments){ %> 
                <article class="comment">
                    <span>
                        <span><%= comment.getNick() %></span>
                        <span><%= comment.getRdate().substring(2, 10) %></span>
                    </span>
                     <!-- readonly 뒤에 : 내가 만든 속성명="데이터"   data-속성="데이터" -->
                    <textarea name="comment" readonly data-seq="<%= comment.getSeq()%>"><%= comment.getContent() %></textarea>
                    <% if(mb.getUid().equals(comment.getUid())){ //mb의 아이디와 comment의 아이디가 일치하면<-본인이 작성한 글이 맞으면) %>
                    <div>
                        <a href="/Jboard/proc/deleteComment.jsp?parent=<%= comment.getParent() %>&seq=<%= comment.getSeq() %>" class="btnCommentDel">삭제</a>
                        <a href="#" class="btnCommentModify">수정</a>
                        <a href="#" class="btnCommentCancel">취소</a>
            		</div>                        
                    <% } %>
                                       
                </article>
                <% } %> 
                
                <% if(comments.size() == 0){ %>
                <p class="empty">등록된 댓글이 없습니다.</p>
                <% } %>
            </section>

            <!-- 댓글입력폼 -->
            <section class="commentForm">
                <h3>댓글쓰기</h3>
                <form action="/Jboard/proc/commentProc.jsp" method="post">
                	<input type="hidden" name="parent" value="<%= article.getSeq() %>"/> <!-- 현재보고있는글번호 -->
                	<input type="hidden" name="uid" value="<%= mb.getUid() %>"/>
                
                    <textarea name="content"></textarea>
                    <div>
                        <a href="#" class="btnCancel">취소</a>
                        <input type="submit" class="btnWrite" value="작성완료"/>
                    </div>
                </form>
            </section>

        </section>
    </div>    
</body>
</html>

-------------------------------------------------------------------------------------------
5교시~8교시 ) 리눅스 : 프린트 p12~18까지

- top : 윈도우의 작업관리자 같은 느낌
- 실시간 모니터링 (1초마다 확인) : top -d 1
- 패키지 설치시 root로 로그인해서 설치해야 함 yum install mc
- mc 실행하면 파란화면 뜨지? midnight command / f10이 종료

- c alt f2 / f3으로 cm과 화면 전환

-프린트 참고할 것.


*************************************************css>style.css


/* 초기화 */
* {
    margin: 0;
    padding: 0;
    font: normal 12px '돋움';
}

ul, ol {list-style: none;}
a {text-decoration: none; color: #111;}
input, textarea {outline: none;}
body {}
#wrapper {}

/* 회원-로그인 */
#user {}
#user.login {
    width: 360px;
    height: auto;
    margin: 100px auto;            
}
#user.login > form {
    position: relative;
    padding: 20px 20px 20px 50px;
    border: 1px solid #cfded8;
    background: #fff;
    border-bottom: 0;
}

#user.login > form > table img {
    width: 20px;
}
#user.login > form > table input {
    width: 162px;
    height: 22px;
    margin: 0 0 5px 0;
    border: 1px solid #e4eaec;
    background: #f7f7f7;
    color: #111;            
}
#user.login > form > input[type=submit] {
    position: absolute;
    right: 52px;
    top: 22px;
    width: 60px;
    height: 55px;
    padding: 8px;
    border: 1px solid #bebebe;
    background: #fdfdfd;
    color: #111;
}

#user.login > .info {
    margin-bottom: 30px;
    padding: 20px;
    border: 1px solid #cfded8;
    background: #f5f6fa;
    overflow: hidden;
}

#user.login > .info > p {
    padding: 10px 0;
}
#user.login > .info > a {
    float: right;
}

/* 회원-약관 */
#user.terms {
    width: 600px;
    margin: 60px auto;            
}
#user.terms > table {
    width: 100%;
    border-top: 2px solid #111;
    border-collapse: collapse;
    border-spacing: 0;
}
#user.terms > table > caption {
    text-align: left;
    font-weight: bold;
    padding: 10px 0;
}
#user.terms > table tr {}
#user.terms > table tr > td {
    padding: 6px 10px;
    border: 1px solid #e9e9e9;
}

#user.terms > table textarea {
    width: 100%;
    height: 200px;
    resize: none;
    border: 1px solid #e4eaec;
    background: #f7f7f7;
    color: #111;
    padding: 2px;
}
#user.terms > table p {
    float: right;
}
#user.terms > table p > input {}

#user.terms > div {
    padding: 20px 0;
    text-align: right;
}
#user.terms > div > a {
    padding: 8px;
    border: 1px solid #bebebe;
    color: #111;
}
#user.terms > div > a:nth-child(1) {background: #fdfdfd;}
#user.terms > div > a:nth-child(2) {background: #e9e9e9;}

/* 회원-회원가입 */
#user.register {
    width: 600px;
    height: auto;
    margin: 60px auto;            
}
#user.register > form {}
#user.register table {
    width: 100%;
    border-top: 2px solid #111;
    border-collapse: collapse;
    border-spacing: 0;
    margin-bottom: 10px;
}
#user.register table caption {
    padding: 10px 0;
    font-weight: bold;
    text-align: left;
}
#user.register table tr {}
#user.register table td {
    padding: 6px 12px;
    border: 1px solid #e9e9e9;
}

#user.register table td:nth-child(1) {
    width: 80px;
    background: #f5f8f9;
}

#user.register table input {
    width: 160px;
    height: 22px;
    background: #f7f7f7;
    border: 1px solid #e4eaec;
    text-indent: 6px;
}
#user.register table span {}

#user.register table div {
    margin-bottom: 2px;
}
#user.register table div:nth-child(1) > input {width:  80px;}
#user.register table div:nth-child(2) > input {width: 320px;}
#user.register table div:nth-child(3) > input {width: 320px;}

#user.register table div > button {
    padding: 4px 13px;
    border: 1px solid #bebebe;
    background: #e9e9e9;
    color: #111;
}

#user.register > form > div {            
    text-align: right;
}
#user.register > form > div > .btnCancel {
    padding: 8px;
    border: 1px solid #bebebe;
    background: #fdfdfd;
    color: #111;
}
#user.register > form > div > .btnJoin {
    padding: 7px;
    border: 1px solid #bebebe;
    background: #e9e9e9;
    color: #111;
}

/* 게시판 - 공통 */
#board {
    width: 720px;
    margin: 60px auto;            
}

#board table {
    width: 100%;
    border-top: 2px solid #111;
    border-collapse: collapse;
    border-spacing: 0;
    margin-top: 6px;
}

#board table th {
    padding: 12px;
    border-top: 1px solid #d1dee2;
    border-bottom: 1px solid #d1dee2;
    background: #e5ecef;
    color: #383838;
}

#board table td {
    padding: 12px 6px;
    border-top: 1px solid #e9e9e9;
    border-bottom: 1px solid #e9e9e9;
}
#board table td:nth-child(1) {
    width: 100px;
    background: #f5f8f9;
    text-align: center;
}

#board table input {
    width: 100%;
    height: 24px;
    border: 0;    
}
#board table textarea {
    width: 100%;
    height: 280px;
    resize: none;    
    border: 0;
}

#board .btnWrite  { padding: 7px; border: 1px solid #3b3c3f; background: #4b545e; color: #fff;}
#board .btnCancel { padding: 8px; border: 1px solid #bebebe; background: #fdfdfd; color: #111;}
#board .btnDelete { padding: 8px; border: 1px solid #bebebe; background: #fdfdfd; color: #111;}
#board .btnModify { padding: 8px; border: 1px solid #bebebe; background: #fdfdfd; color: #111;}
#board .btnList   { padding: 8px; border: 1px solid #bebebe; background: #fdfdfd; color: #111;}

#board .btnCommentDel    {} 
#board .btnCommentModify {} 
#board .btnCommentCancel {display: none;} 




/* 게시판 - 글목록 */
#board.list {
    position: relative;
}
#board.list > h3 {}
#board.list > article {}
#board.list > article > p {
    position: absolute;
    right: 0;
    top: 0;
}

#board.list > article > table tr > td:nth-child(1) {width:  50px; text-align: center; background: #fff;}
#board.list > article > table tr > td:nth-child(2) {width:  auto; text-align: left;}
#board.list > article > table tr > td:nth-child(3) {width: 100px; text-align: center;}
#board.list > article > table tr > td:nth-child(4) {width: 100px; text-align: center;}
#board.list > article > table tr > td:nth-child(5) {width:  50px; text-align: center;}

#board.list > .paging {
    padding: 20px;
    text-align: center;            
}
#board.list > .paging > a {
    padding: 8px;
    background: #f2f2f2;
    border: 1px solid #d7d7d7;            
}

#board.list > .paging > .current {
    border: 1px solid #6d6d6d;
    background: #888;
    color: #fff;
}

#board.list > .btnWrite {
    position: absolute;
    bottom: 14px;
    right: 0;
}
/* 게시판-글보기 */
#board.view > div {
    padding: 16px 0;
    text-align: right;
}

#board.view > section {
    padding: 20px;
    border: 1px solid #e3e3e3;
    background: #f9f9f9;
    margin-bottom: 16px;
}
#board.view > section > h3 {
    font-weight: bold;
}

#board.view > .commentList > article {
    border-top: 1px dotted #999;
    margin-top: 10px;
    padding-top: 10px;
}

#board.view > .commentList > article > textarea {
    width: 100%;
    height: 60px;
    padding: 6px;
    box-sizing: border-box;
    resize: none;
    border: 0;
    background: transparent;
}
#board.view > .commentList > article > div {
    text-align: right;
}

#board.view > .commentList > .empty {
    padding: 20px 0;
    text-align: center;
}

#board.view > .commentForm > form > textarea {
    width: 100%;
    height: 60px;
    border: 1px solid #e4eaec;
    margin: 10px 0;
    resize: none;
}
#board.view > .commentForm > form > div {
    text-align: right;
}

/* 게시판-글쓰기 */
#board.write {}
#board.write form > div {
    margin-top: 10px;
    text-align: right;
}

/* 게시판-글수정 */
#board.modify form > div {
    margin-top: 10px;
    text-align: right;
}


------------------------------------------------------------------8/20(금) 3주 5일차
1~3교시 ) 수행평가 07. 빅데이터 환경분석

- 수행평가 진행하면서 나만의 PPT 템플릿 만들기

4교시 ) 영상시청

5~8교시 ) 코딩테스트

input().split() : 두개 이상 입력받기위해 사용, 모두 string으로 저장됨. 문자열을 쪼개서 리스트에 담는다.


-----------------------------------------------------------------------------------------------8/23(월) 4주 1일차

저번주까지 게시판만들기 - terms.jsp -  register.jsp, registerProc.jsp

오전) 커뮤니티싸이트 진행! (팜스토리)
오후) 리눅스!

1교시)
- vscode로 준비작업 - css, img, js, index.html
- img부터 옮겨오기
- 사이트보면서 큰 틀 잡기(탭캡쳐) : header, content, footer, wrapper, slider, banner, latest, info 
- index.html작업 - 메인 구성 블루프린트(ㅌㅋㅊ) : 초기화, 전체공통, 헤더영역, 메인영역, 푸터영역......

- 헤더영역 배경 설정 : body에 header에 하지말고 header영역에 background통합속성으로 도트무늬 설정해주기

2교시)
- farmstory랑 home,login,join,contact us랑 3만원이상 무료배송, 팜카드10%적립  설정 a태그에 image설정해서 header영역 완성.

- 메뉴목록 : ul, li태그 사용, 링크에 이미지니까 a태그에 img까지 출력할것임

- 메뉴 이미지 지정, 마우스 올렸을때 (hover) 색깔있는 이미지 출력.

- ctrl + alt+ 방향키아래 하면 다중커서모드 설정. esc키로 빠져나옴

( pixlr.com/kr 온라인이미지 편집사이트 )

3교시) Footer, slider, slider부분에 슬로건&배너올리기



4교시)
a태그는 너비width를 가질수없음 따라서 display : block처리

- 클릭 이동이 가능한 이미지는 a태그로 설정.

-처음에 잡아놓고 하는게 좋음 (이건 윗영역에서 잡아줌)
 	border: 1px solid green;
            box-sizing: border-box;

나머지 처리하기 - banner 및 info ...집에가서 해보자!!!

팜스토리 : http://wppremium02.hubweb.net/
--------------------------------------------------------------------------------
5~6교시) 리눅스 , 원격사용 / putty나 filezilla 굉장히 많이 사용함

putty 다운로드 : 접속 클라이언트 도구

putty를 통해서 서울에 있는 서버 접속.

ctrl+D 로그아웃

apache: 정적html페이지를 서비스해주는 웹서버 (어플리케이션)
tomcat: 동적페이지를 서비스해주는 웹서버

P25 . filezilla 다운로드 : 내pc에 있는걸 업로드 or 다운로드

192.168.56.101



-----------------------------------------------------------------------------------------------8/24(화) 4주 2일차
1교시) 총12개의 sub페이지로 구성 (클릭하면 넘어가는 페이지들 디자인) 
- 먼저 vscode에서 폴더 및 파일부터 생성
- introduction - hello.html 작업.

2교시)
- 내가 의도한 크기로 잡고싶을때 box-sizing을 잡아주면 됨. (border값이나 padding값때문에 늘어나기때문에) 
- aside부분 진행(왼쪽메뉴)
- hover처리는 마우스 갖다댔을때 이미지 바뀌는 작업

3교시)hello.html을 복붙하고 고쳐나가면 됨.
- direction 지도 붙여넣기,  나머지는 복붙해서 market, croptalk, event, community 작업 고쳐주기

4교시) 총정리
- html & css 이론정리


5교시)
mariadb의 root는 local root
heidisql의 root는 remote root(원격 루트) 계정이 없으므로 만들어야함.

- 도구 - 데이터베이스를 sql로 내보내기 - 생성생성 이름지정

-리눅스 자바 설치 : 자바가 설치되어야 tomcat이 설치될 수 있음(설치 순서 중요)

- 리눅스 너무 어렵다기보다 안 친숙하다 ......



6~7교시) putty에선 드래그만 해도 복사가 됨, 우버튼 누르면 붙여넣기 됨.

putty server101에서 자바 파일 만들어봤어. 근데 여기선 complie까지 해서 실행도 직접해줘야헤ㅔ

컴파일 : javac Hello.java
실행 : java Hello

wget 리눅스 다운로더 프로그램

톰캣 리눅스에 설치는 tar.gz우버튼 링크주소 가져와서 wget 우버튼으로 다운로드

yum install tar도 설치해줘

파일위치찾기  : whereis httpd

- 이클립스 열어서 파일질라로 옮겨 배포하기 - 우버튼 - 
- 파일질라 연결해서 jsp폴더에 옮겨담기
- 웹에서 192.168.56.XXX:8080/ch01/hello.jsp 열어보기

-이클립스와 푸티 자바버전


-----------------------------------------------------------------------------------------------8/25(수) 4주 3일차
<오늘꺼 코드리뷰 꼭 하기......>


1교시~4교시 총정리) [팜스토리 JSP작업]

- 가져온 html파일들 jsp페이지지시자 복붙 및 확장자 바꾸기 (html->jsp)
- utf-8설정 (window - preferences - encode)
- 링크작업 : 경로들 정확히 지정해주기. /Farmstory1/~~~로 절대경로로 보통 지정해주는 게 좋음.
- 헤더, 푸터 인클루드 작업
	index.jsp : 헤더 푸터는 공통으로 많이 쓰일 수 있으니  _header와 _footer.jsp로 따로 만들어주고. index에는 헤더와 푸터를 지운 후 (지울때 wrapper까지 지워라) include시켜주자
	(<%@ include file="./_header.jsp" %> /  <%@ include file="./_footer.jsp" %> 요런식으로) 이때 include지시자에는 상대경로로 지정!
	나머지 헤더 푸터가 공통으로 나올 모든 jsp파일들 include시켜주기 - login, terms, register 등등 나머지 모든 파일 지정해주기 (헤더 푸터 지워야함!!!)
- 게시판 연결 작업	: 일단 Jboard에서 로그인 및 게시판 파일들 복붙해넣기.  (user랑 board폴더 만들어서)
		  취소, 수정, 다음 버튼들 경로 잘 연결시키기.

- 사이드 부분 추가 작업 : 처음에는 _aside_,,,으로 잡아줬으나 더 직관적인 방법 깨달음오신 강사님..			
	젤 위에 이거 선언해주고
	<%
 	String mode = request.getParameter("mode");
	String uri = request.getRequestURI();
	
	if(mode==null){
		mode = "l";
	}
	%>		        
	내용 시작에
	<% if(mode.equals("l")){ %>
	    	<jsp:include page="../board/list.jsp"/>
	<%}else if(mode.equals("w")){ %>
		<jsp:include page="../board/write.jsp"/>
	<%}else if(mode.equals("v")){ %>
		<jsp:include page="../board/view.jsp"/>
	<%}else if(mode.equals("m")){ %>
		<jsp:include page="../board/modify.jsp"/>
	<%} %>
	이렇게 선언해주면 됨.	
	게시판 필요한 페이지들 모두 설정.
------------------------------------------------------------------------------------

5~8교시) 리눅스 DB
- aws : 지역 서울로 잡고, 1년간 무료구나... 아마존 리눅스 : 센토스를 튜닝한것...
- 키값 다운로드받음 . 나의 서버 주소 : 52.79.155.251
- aws 인스턴스 실행 후에 푸티와 연결
- 푸티에 접속 , 계정이 없으므로 , 아이디는 키값으로, 
- aws root 7자리
- yum -y update부터
- 방화벽 inbound되어있으므로 푸티에 방화벽 깰 필요없네...
HOSTING.KR : 도메인주소 사는 사이트
- 지금 하고 있는 작업들 잘 정리해두기 !!! 에버노트 같은 곳!

- 가상머신(리눅스 or AWS 서버)  - putty(다른 서버 접속 클라이언트 도구, putty통해서 서울 서버에 접속) - filezilla(내pc-가상머신 연동) - heidisql(DB) 

리눅스 centOS8 운영체제- virtual box로 가상머신생성 후 

가상화는 PC와 같은 물리적 호스트 컴퓨터 및/또는 클라우드 공급자의 데이터 센터에 있는 서버와 같은 원격 서버에서 “빌려 온” 
전용 용량의 CPU, 메모리, 스토리지를 사용하여 소프트웨어 기반 또는 “가상” 버전의 컴퓨터를 만드는 프로세스


- java 11버전으로 바꾸고 war파일 만들기


-----------------------------------------------------------------------------------------------8/26(목) 4주 4일차
1교시) 로그인 처리하기

- 일단 Jboard에서 Bean들이랑 lib 복붙해오기
- 로그인 처리 작업 : login.jsp에서 form action 경로 잡아주고 -> Bean에서 MemberDao 자바파일 생성 (싱글톤객체, 로그인되었을때 DB에서 select해오기trycatch문->
  proc만들어서 loginProc 와서 전송데이터수신 후 MemberBean mb 선언하기 , 회원이 맞으면 첫페이지, 회원이 아니면 login페이지로) 
- logout 페이지도 하나 만들어서 처리하기

2교시) 게시판 글쓰기 (약관이랑 회원가입은 내가 해라)
농작물이야기 - 텃밭가꾸기 게시판 글쓰기 작업
write가 grow에 포함, 즉 하나

DB cate에 grow라 들어가져야지

3교시) 메인에 글목록들

농작물이야기에 

4교시) 정리
---------------------------------------------------------------------------------------------------------
5교시) AWS 인스턴스 종료 - 데이터 다 날라감, 인스턴스 다시 생성!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	< AWS 인스턴스 생성 및 연결 - cmd창같은거 뜸 > 

----------	< AWS EC2서버 root로 계정생성 >----------------------------------

1. AWS EC2 생성하기
2. 해당 키페어를 이용하여 EC2 접속하기 (ec2-user)
    또는 브라우저에서 인스턴스 마우스 오른쪽 메뉴에서 연결
3. 접속후 다음과 같은 순서로 변경합니다. 
- sudo passwd root
- sudo vi  /etc/ssh/sshd_config
    ( 38 : PermitRootLogin no를 yes로 변경)
    ( 65 : PasswordAuthentication no를 yes로 변경)

- sudo mkdir /root/.ssh
- sudo cp /home/ec2-user/.ssh/authorized_keys /root/.ssh
- sudo service sshd restart
4. root로 접속하기
------------------------------------------------------------------------------

	< AWS 방화벽 대신 보안그룹 - 인바운드에서 설정해줄것 > 
- mysql , http, 사용자IP(filezilla 21), 사용자IP(tomcat 8080) 이르케 4개 더 잡아주고.

	< 이제 putty를 열어서 작업시작 >
- yum -y update 
- net-tools, vim, wget은 이미 깔려있음.
- java, python, mariadb 깔아주면 됨
- tomcat 깔아주면 됨

----------	< tomcat 설치 및 설정 >-------------------------------------------
1. 톰캣 다운로드
 - 먼저 자바가 설치 되었는지 꼭 확인 
 # java -version

 자바 설치 안했으면(yum install -y java-xxx)
 - 톰캣 공식사이트에서 apache-tomcat-8.x.x.tar.gz  다운로드
 - yum 톰캣 설치는 하지말것(설정 작업 제한)
 - wget 다운로드 주소

2. /root 에서 압축 풀기
 # tar -zxvf apache-tomcat-8.x.x.tar.gz

3. /usr/local 로 이동 후 심볼릭 링크 생성
 # mv apache-tomcat-8.x.x    /usr/local
 # cd /usr/local
 # ln   -s   apache-tomcat-8.x.x    tomcat

4. 방화벽 설정(AWS는 제외)
 # firewall-cmd --permanent --add-port=8080/tcp
 # firewall-cmd --reload

5. 서비스 등록
 # vi /usr/lib/systemd/system/tomcat.service 

아래 내용 입력/저장
--------------------------------------------------------------
[Unit]
Description=tomcat Service
After=network.target syslog.target

[Service]
Type=forking
ExecStart=/usr/local/tomcat/bin/startup.sh start
ExecStop=/usr/local/tomcat/bin/shutdown.sh stop

[Install]
WantedBy=multi-user.target
--------------------------------------------------------------

6. systemd 재시작
 # systemctl daemon-reload

7. 톰캣 시작/ 재부팅 등록
 # systemctl status tomcat
 # systemctl start tomcat
 # systemctl enable tomcat

8. 브라우저 접속확인
 - 192.168.xxx.xxx 주소 접속
 - 톰캣 테스트 페이지 출력 확인
 - 참고: AWS는 보안그룹에서 톰캣 포트 8080 인바운드 규칙으로 등록해야 됨

9. 톰캣 Document Root 변경
 # vi /usr/local/tomcat/conf/server.xml

 아래내용 수정
 152라인 : <Host name="192.168.xxx.xxx" appBase="/home/jsp/" unpackWARs="true" autoDeploy="true">   <---- 수정
 153라인 :     <Context path="" docBase="." reloadable="true"/>  <---- 추가

10. 톰캣 unpackWARs 배포권한 755설정
 톰캣은 WAR 배포권한이 기본 750이다. 755로 변경해야 한다.
 # vi /usr/local/tomcat/bin/catalina.sh

 UMASK="0027" 를  "0022" 로 변경(295라인 근처)

11. 톰캣 홈 디렉터리 생성 및 시작페이지 생성
 # mkdir    /home/jsp
 # vi    /home/jsp/index.jsp
 --------------------- 내  용 --------------------- 
     <%
	out.print("<h3>Hello JSP!!!</h3>");
     %>
 --------------------------------------------------

12. 톰캣 재시작
 # systemctl restart tomcat

13. 배포확인
 - 이클립스 - Export - 톰캣 홈 디렉토리 업로드
 - 192.168.xxx.xxx/Ch01/hello.jsp 확인
------------------------------------------------------------------------------

	<putty에서 설치 및 설정을 다 하고 mariadb도 설정했으면 이제 heidisql 접속할 것>

	<backup.sql을 가져와 내 수업자료폴더(maro02260226)를 옮겨놓을 것>

	<이클립스 가서 DB host주소 아이디, 비번 다 바꿔주고 , export 할때 java-11버전으로 바꾼 뒤 war 파일로 export! >

	<파일질라 FSTP 확인!! 접속하여 옮기고 새로고침, putty도 restart들 해주기>

	<만약 파일질라로 war파일 옮겼을 때 폴더가 생성되지 않는다면 tomcat설정에 10번을 잘못했을 가능성>

	<드디어 웹에 가서 주소치고 연결, DB와도 연동되는지 확인 > 

----------	<DB에 한글 인식시키는 작업>------------------------------------------

#vi /etc/my.cnf 에서 기존내용 다 지우고 아래 내용 추가후 mysql 재시작

[client]
default-character-set=utf8

[mysql]
default-character-set=utf8

[mysqld]
collation-server=utf8_unicode_ci
init-connect='SET NAMES utf8'
character-set-server=utf8

또는 JDBC 접속 주소 뒤에 아래의 파라미터 추가
jdbc:mysql://localhost:3306/mydb?useUnicode=true&characterEncoding=utf8
---------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------8/30 (월) 5주 1일차
1교시) Farmstory1 게시판 파일 첨부 작업

- 디코 캡쳐화면 확인하기 : filetable에 select 해서 이름도 조회해야함(oriname과 newname란 확인) ,  update문 써서 파일도 첨부해야 하고..
- Jboard에 view작업 파일첨부부분 링크 - proc에 download.jsp - 



// 파일 다운로드 response 헤더수정
response.setContentType("application/octet-stream");
response.setHeader("Content-Disposition", "attachment; filename="+URLEncoder.encode("파일명.txt", "utf-8"));
response.setHeader("Content-Transfer-Encoding", "binary");
response.setHeader("Pragma", "no-cache");
response.setHeader("Cache-Control", "private");

2교시~4교시) 팜스토리 게시판까지 완성시키기 (게시판 글목록 안보임, 글쓰기 안넘어감)




-----------------------------------------------------------------------------------------
5~8교시) 리눅스 끝! 빅데이터 시작! 자료는 공유문서에 빅데이터 이해와 실습.pdf

- 빅데이터는 결국 80% 이상이 비정형 데이터.

- 기상청 날씨데이터 수집해서 가상머신에 저장하여 1분마다 업데이트 되도록 설정
weather.py를 home으로 옮겨서 무슨 작업을 했는데...... *****(분/시/일/월/요일 순서) 권한설정하는 명령어 : vi /etc/crontab
 
- var - 각종 log파일이 저장되는 곳

- requests : HTML 페이지 요청하기    
import requests as req -> url = '싸이트주소' -> html = req.get(url).text 하고 print(html)하면 내용만 출력됨

- parsing : 마크업문서에서 특정 태그의 데이터를 추출 : beautifulsoup임!!!
1. 페이지요청
import requests as req -> from bs4 import BeautifulSoup as bs -> 페이지요청하고 -> 
만약 페이지요청이 안될 때 headers={'User-Agent': 'Mozilla/5.0'}을 추가하면 네이버는 뚫림
2. 페이지파싱 (이걸 외워야해)
dom = bs(html, 'html.parser')
titles = dom.select('css copy selector한 태그')
3. 파싱데이터 출력
for tit in titles:
	print(tit.text)
(or)
for i in range(5):
	print('%d위 : %s' % (i+1, 변수[i].text))

파일저장 및 






--------------------------------------------------------------------------------------------------8/31 (화) 5주 2일차
1교시~4교시) 팜스토리 게시판까지 완성.

댓글 수정 삭제 취소 & 첨부파일 다운로드까지 확인하기!

코드리뷰하기.....


5교시) 빅데이터 - 파이썬 셀레늄 / 가상머신 server101 

		************패키지 설치 방법 2가지 (Beautifulsoup이나 selenium 등)
		- terminal - pip install '패키지명'
		- 설정 - 프로젝트 빅데이터 - python interpreter

		- chrome webdriver 다운받아 crawling폴더에 복붙해넣기 (가상드라이버 실행시키기 위해)

- webdriver 4_selenium에 의해 chrome페이지가 작동됨. 모든 제어를 selenium이 하고 있음 - 네이버로 로그인도 해보고, 네이버 뉴스 크롤링도 해볼 것임

어제 - 데이터를 수집할 페이지만 요청
오늘 - 링크타고 페이지를 이동해가면서 데이터 수집, 연속성이 있음 고급기술...

6교시) 네이버 뉴스 it/일반 크롤링 계속...

7교시) 네이버 뉴스 크롤링 마무리

8교시) 오늘 분량 정리
	- 파이참 단축키 : alt + 방향키로 파일 간 이동가능
	- selenium 가상브라우저 실행시키기 위해 먼저 import 작업 : from selenium import webdriver
	- *가상브라우저 실행 : browser = webdriver.Chrome('./chromedriver.exe')
	- *싸이트 이동 : browser.get('싸이트 주소')
	- 요소에 접근하는 메소드 : 변수명.find_element_by_selector('페이지 검사도구로 클릭하여 태그 복붙 (우버튼-copy-copy selector)')  - css선택자를 사용하여 접근
	- 네이버뉴스 크롤링 : 5_NaverNews 파이썬 문법 이해하기...

--------------------------------------------------------------------------------------------------9/1(수) 5주 3일차

1~2교시) 팜스토리2 새로운 방식으로 접근 : list.jsp를 중심으로 aside를 붙임

3~4교시) 나머지 완성하기 : view.jsp -> deleteProc, deleteCommentProc, insert~등 Proc에서 어디로 넘어가는지 생각해서 redirect 잘 잡아주기

5~8교시) 빅데이터 파이썬 코드  
- 방대한 양의 영화리뷰 텍스트들을 통해 딥러닝기술로 챗봇을 만들거야... 실제 사람들이 쓰는 대화 텍스트들(자연어)이 필요해...
- 네이버 영화 평점 크롤링하기 6_MovieReview
- 로거 생성하기
- 단일 파일로 저장하기엔 부담, 담주에 MongoDB로 저장할 것임.
- 날씨데이터를 selenium으로 크롤링하는거 이번주 수행평가임...........



---------------------------------------------------------------------------------------------------- 9/2(목) 5주 4일차


5교시) 
sPEbsiUpUORoWNKR4lYy
pwilDRpM8x


import os
import sys
import urllib.request
client_id = "sPEbsiUpUORoWNKR4lYy"
client_secret = "pwilDRpM8x"
encText = urllib.parse.quote("갤럭시플립")
url = "https://openapi.naver.com/v1/search/news.json?query=" + encText + "&display=100"# json 결과
# url = "https://openapi.naver.com/v1/search/blog.xml?query=" + encText # xml 결과
request = urllib.request.Request(url)
request.add_header("X-Naver-Client-Id",client_id)
request.add_header("X-Naver-Client-Secret",client_secret)
response = urllib.request.urlopen(request)
rescode = response.getcode()
if(rescode==200):
    response_body = response.read()
    print(response_body.decode('utf-8'))
else:
    print("Error Code:" + rescode)














# 파일저장 : csv 파일
directory = "./weather/{:%Y-%m-%d}".format(datetime.now())
if not os.path.exists(directory):
    os.makedirs(directory)

# 파일생성 - 1시간마다 바뀐 데이터가 출력되도록!
fname = "{:%Y-%m-%d-%H-%M.csv}".format(datetime.now())
file = open(directory+'/'+fname, 'w', encoding='utf-8')









for tr in trs:
    file.write('%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n' % (tr.find_element_by_css_selector('td')[0].a.text,
                                                             tr.find_element_by_css_selector('td')[1].text,
                                                             tr.find_element_by_css_selector('td')[2].text,
                                                             tr.find_element_by_css_selector('td')[3].text,
                                                             tr.find_element_by_css_selector('td')[4].text,
                                                             tr.find_element_by_css_selector('td')[5].text,
                                                             tr.find_element_by_css_selector('td')[6].text,
                                                             tr.find_element_by_css_selector('td')[7].text,
                                                             tr.find_element_by_css_selector('td')[8].text,
                                                             tr.find_element_by_css_selector('td')[9].text,
                                                             tr.find_element_by_css_selector('td')[10].text,
                                                             tr.find_element_by_css_selector('td')[11].text,
                                                             tr.find_element_by_css_selector('td')[12].text))

file.close()

print('데이터 수집 완료...')



---------------------------------------------------------------------------------------------------- 9/6(월) 6주 1일차
1교시)  jsp 표현언어
- <%= %>이거 대신 표현언어 ${}를 활용해볼거야.
- pageScope, requestScope, sessionScope 주로 3개 사용할 것임.
- mvc기반의 웹프로그래밍은 <% %>스크립틀릿을 사용하지 않음.오전 9:51 2021-09-06

2교시) jstl - maven repository에서 jstl 다운로드받기
- jstl lib에 추가해주기
- 스크립틀릿 대신 jstl 활용하는 것.

3교시~4교시) jsp책보면서 정리 (14강, 15강)
- 기본형태 ${변수} : 변수 값 출력 / 표현언어식안에 연산도 쓸 수 있음 / 
- JSTL은 자바 커스텀 태그
- <c: ~>이게 코어태그인데, 얘를 사용하기 위해선 위에 taglib / 변수선언시 c:set, 조건문 c:if, c:choose, c:when, c:toherwise 반복문 c:forEach
- <c:set var="변수명" value="변수값 "
 
5교시~8교시) 빅데이터 적재 (PDF파일 참고) - MongoDB 실습pdf 참고
- 가상머신 server101접속 후 로그인
- putty 접속 후 로그인
- mongodb싸이트 - community server - 5.0.2 / CentOS 8.0 - copy link
- putty에서 wget + 링크주소
- 쌤 공유문서에 빅데이터 이해와 실습 적재pdf 열어서 mongodb 순서대로 따라하기

- mongodb의 목적은 오로지 수집이므로 데이터 수정이나 삭제는 별 의미가 없음. 
	vs mysql(관계형 데이터베이스)는 서비스 용도이므로 수정,삭제등등이 원활하지만

- robomongo - heidisql과 비슷한 놈. download only 클릭 
- robo는 Server101 연동해서 admin,admin또는 maro,maro로 접속하구
- 새창열어서 db.Member.insert해보고 테이블 확인해보기~!
- 실행할땐 블록지정해서 ctrl+enter 하기
- test실행문이 내 아이디 실행문과 같음

-----------------------------------------------------------------------------------------------------
3.3 빅데이터 적재 실습하기
1) MongoDB 실습
실습1 MongoDB 설치 및 설정 실습하기
STEP_1. MongoDB repository 추가 후 설치
└ https://www.mongodb.com 메인 Docs 카테고리 메뉴 하위 Server 메뉴 클릭
└ Getting Started의 Installation Guides 클릭
└ Install MongoDB에서 MongoDB Community Edition Installation Tutorials의 Install MongoDB
 Community Edition on Red Hat or CentOS 클릭
└ Install MongoDB Community Edition에서 1단계 따라하기
 
#vi /etc/yum.repos.d/mongodb-org-4.2.repo
// 아래 내용 입력
[mongodb-org-4.2]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.2/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc
└ Install MongoDB Community Edition에서 2단계 따라하기
 
#yum install –y mongodb-org
#vi /etc/yum.conf
// 맨 밑에 한줄로 아래 내용 입력
exclude=mongodb-org,mongodb-org-server,mongodb-org-shell,mongodb-org-mongos,
mongodb-org-tools
STEP_2. MongoDB 설정
└ 외부 접속 허용 및 보안설정
 
#vi /etc/mongod.conf
// 29라인 수정
bindIp: 127.0.0.1 → 0.0.0.0
// 32라인 주석해제, 33라인 입력, 33라인 반드시 스페이스바로 들여쓰기 할 것
security:
authorization: enabled
└ SELINUX 해제
 
#vi /etc/selinux/config
// 7라인 수정
SELINUX=enforcing → disabled
└ MongoDB 서비스 실행/자동실행/상태 확인
 
#systemctl start mongod
#systemctl enable mongod
#systemctl status mongod
빅데이터 적재 Workbook
- 2 -
└ 외부접속을 위한 방화벽 허용(방화벽을 꺼놓을 경우 안해도 됨)
 #firewall-cmd --permanent --zone=public --add-port=27017/tcp
#firewall-cmd --reload
STEP_3. MongoDB 접속/인증
└ 최초 MongoDB를 설치하면 기본 계정은 존재하지 않고 생성해야 함. 또한 한 계정으로 여러 DB의
 권한을 가질 수 없으며 1계정 - 1DB 원칙이 기존 RDBMS와 다름
 로컬에서는 계정 정보 없이 mongo 명령으로 접속이 가능하지만 외부에서 접속인증을 통한 원격 
 접속을 위해서 계정을 생성 한다.
 #mongo
└ 관리자 DB 선택(Mongo 쉘에서 실행)
 >use admin
└ 슈퍼 관리자 생성 후 종료
 
>db.createUser({
user: "admin",
pwd: "1234",
roles: [{role: "root", db: "admin"}]
})
>exit
└ admin 계정으로 다시 접속해서 일반 관리자 생성
 
#mongo -u admin -p
>use admin
>db.createUser({     user:"chhak",     pwd:"1234",     roles:["userAdminAnyDatabase","dbAdminAnyDatabase","readWriteAnyDatabase"]   })
└ test DB 생성, test 일반 사용자 생성
 
>use test
>db.createUser({     user:"test",     pwd:"1234",     roles:["dbAdmin","readWrite"]   })
└ test 사용자 삭제
 >db.dropUser("test")
└ MongoDB 종료
 >exit
빅데이터 적재 Workbook
- 3 -
실습2 MongoDB 기본 쿼리 실습하기
STEP_1. MongoDB 접속
└ test DB에 test 계정으로 접속
 #mongo test –u test –p 1234
STEP_2. MongoDB 기본 쿼리연습
└ 현재 DB, DB 리스트, Table 조회
 
>db
>show dbs
>show tables
└ 데이터 입력
 
>db.user1.insert({uid:'A101', name:'김유신', hp:'010-1234-1111', age:25})
>db.user1.insert({uid:'A102', name:'김춘추', hp:'010-1234-2222', age:24})
>db.user2.insert({uid:'B101', name:'장보고', hp:'010-1234-3333', age:31})
>db.user2.insert({uid:'B102', name:'강감찬', hp:'010-1234-4444', age:36})
>db.user3.insert({uid:'C101', name:'이순신', hp:'010-1234-5555', age:47})
└ 데이터 조회
 
>db.user1.find()
>db.user2.find()
>db.user3.find()
>db.user1.find({uid:‘A101’})
>db.user2.find({age:{$gt:35}})
>db.user3.find({age:{$lt:50}},{uid:1, name:1})
└ 데이터 수정
 >db.user1.update({uid:'A101'},{$set:{age:29}})
>db.user3.update({age:{$gt: 40}},{$set:{hp:’010-1111-1234‘}})
└ 데이터 삭제
 >db.user1.remove({uid:’A102‘})
>db.user2.remove({age:{$gte:35}})
빅데이터 적재 Workbook
- 4 -
실습3 MongoDB GUI 클라이언트 실습하기
STEP_1. MongoDB Robo 설치하기
└ https://robomongo.org 에서 Download Robo 3T Only 클릭
└ Download Robo 3T 클릭
└ Windows Robo 3T 1.x Installer 다운로드
└ 설치 마법사 실행 후 설치하기
STEP_2. MongoDB 접속하기
└ Robo 3T 실행 후 Create – Connection, Authentication 입력 후 Save 클릭
└ MongoDB Connections에서 등록한 MongoDB 서버 선택 후 Connect 클릭
STEP_3. MongoDB 기본 쿼리 실습하기
└ Collection : Member
└ Field : uid, name, hp, pos, dep, rdate
└ 데이터 입력, 조회, 수정, 삭제 실습하기

----------------------------------------------------------------------------------------------------9/7(화) 6주 2일차

1교시) mvc패턴의 모델2 ...모듈화 (탭 캡쳐화면 참고) (탭 노트 참고)
MVC(Model(java bean), View(jsp페이지), Controller(Servlet)로 이루어져있음)

- ch07 패키지 생성
- java쪽에 controller패키지 생성 후 클래스로 MainController 만들기
- extends HttpServlet 선언
- init(초기화 or 초기작업), doget, dopost 이 3개의 메소드를 재정의할것임 - ctrl+space로 override 시키기
- MainController오류뜨는거 첫번째꺼 눌러주면 에러 없어짐. (굳이 안해도됨)
- init, doget, dopost 클래스 안의 자식들은 다 지워줘

- init(초기화작업) : 
	view페이지용으로 우리는 hello.jsp를 만들어놨기때문에 ....
	hello.do라는 액션주소 선언하려해 : WEB-INF에 new-file-urlMapping.properties 만들어주기 (properties객체만들거거든)
		/hello.do(key값)=model.HelloService(value값)
		java에 HelloService 클래스 생성.
	추가로 welcome.jsp, greeting.jsp도 만들고 나서 properties에 선언 후 각 Service페이지 만들어줌
		/welcome.do=model.WelcomeService  ,   /greeting.do=model.GreetingService 
		java에 WelcomeService 클래스, GreetingService 클래스 생성.
	이제 MainController로 돌아와 init에서 작업 시작 - 
				// 최초 요청 시 실행되는 컨트롤러 초기화 메서드
				// 액션주소 프로퍼티 파일 경로 구하기
				// 프로퍼티 파일 입력스트림 연결 후 프로퍼티 객체 생성
				// 프로퍼티 객체로 서비스 객체 생성	
	
2교시 ) 이제 MainController로 돌아와 init에서 작업 ing - init은 ServletConfig config 매개변수 선언 해줘야함

				// 최초 요청 시 실행되는 컨트롤러 초기화 메서드
				// 액션주소 프로퍼티 파일 경로 구하기
				// 프로퍼티 파일 입력스트림 연결 후 프로퍼티 객체 생성
				// 프로퍼티 객체로 서비스 객체 생성	

	doget (데이터 전송방식) doget, dopost는 처리로직이 똑같기때문에 requestProc이라는 함수 선언해서 공통으로 만들자

	dopost (데이터 전송방식)

	MainController 끝

3교시 ) 

- Controller(Servlet)등록을 web.xml에 컨트롤러 등록작업 해야함 - 공백도 조심할것!!!!!!!!!!!!휴.....

- 무조건 controller로 요청하게끔, view로 바로 못들어가게 보안설정 해줘야함 : web.xml에서 작업. 이 설정을 하면 hello.jsp로는 접속이 안되지욤


4교시 ) 총정리 + jsp book

- model1은 웹브라우저의 요청을 받아들이고 응답하는 것을 JSP페이지가 단독으로 처리하는 구조.
- model2는 로직을 가진 모델, 흐름을 제어하는 컨트롤러와 뷰가 구분되어있다. 따라서 뷰는 어떠한 처리로직도 포함하지 않고 있음. 뷰는 단지 정보를 보여주는 역할만..JSP가 뷰역할이었지
컨트롤러가 뷰와 모델사이의 흐름을 제어. 클라이언트의 요청을 받아 모델에 넘겨주고 모델이 처리한 작업의 결과를 뷰에게 보내주는 역할.
서블릿을 컨트롤러라고 보면 됨

내일은 model2를 가지고 DB access하는작업 들어감.
------------------------------------------------------------------------------------------------------

5교시~8교시) MongoDB -ing 
- 파이참으로 mongodb에 명령때리기 - 일단 file - setting - project:bigdata - python interpreter 에서 pymongo 추가하기

from pymongo import MongoClient as mongo
from datetime import datetime

# 1단계- mongodb 접속
conn = mongo('mongodb://maro:1234@192.168.56.101:27017')

# 2단계 - DB 선택
db = conn.get_database('maro')

# 3단계 - Collection(테이블) 선택
collection = db.get_collection('Member')

# 4단계 - 쿼리실행
collection.insert_one({'uid': 'a101',
                       'name': '김유신',
                       'hp':'010-1234-1001',
                       'pos':'사원',
                       'dep':101,
                       'rdate':datetime.now()})

# 5단계 - MongoDB 종료
conn.close()

print('Insert 완료...')


nosql 즉 mongodb가 수집하기엔 좋다.


리눅스용 chromedriver이랑 리눅스용 


리눅스 푸티에 크롬 설치 방법 

# 리눅스 환경 실행할때 리눅스에 크롬 설치할것
1.크롬설치
# yum -y install https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
3.크롬 버전확인
#  google-chrome --version 
Google Chrome 62.0.3202.94


강제종료 : ctrl + c

내일은 하둡한대





---------------------------------------------------------------------------------------------------- 9/8(수) 6주 3일차

1교시) mvc패턴의 모델2와 DB 연동

- 지금은 단일컨트롤러, 스프링에선 다중컨트롤러
- 해당 뷰에 대응되는 서비스가 만들어지니까 서비스도 여러페이지 나올 수 있지 - 이걸 단일 서비스페이지로 만들기위해 
CommonService라는 interface를 상속받았음

- user 폴더에 list, modify, register.jsp 만들기
- jsp는 출력이 안되는상태 (보안걸어놨쟈나) 액션주소를 properties에 정의해주기
- dao - UserDao만들어서 기본적으로 선언해놓기


2교시) 
insertUser(String ~~~ int~~~)변수선언대신 UserBean만들건데 모델2에선 UserVo 라고 선언한대

- 파라미터로 받은 age는 string, 원래 age는 int. 
- controller가 view를 forward + redirect까지 해주도록
- if ( result값이 redirect로 시작하는지 )
- redirect값이 result로 감...
- response객체는 resp이거임
- filter 를 controller에 장착 (문자열 인코딩 등록) : Server Runtime - catalina.jar - catalina.filters - setEncodingFilter~ - 우버튼 copy qualifed name - web.xml에 붙여넣기  (.class빼야함) 확인해봐~
-jstl선언문 맨 위에 달아줘야함

(쌤꺼 복붙한 부분)
<c:forEach var="user" items="${requstScope.users}"> <!-- 표현언어에서 내장객체requestScope. 생략가능함 -->
		<tr>
			<td>${user.getUid()}</td>
			<td>${user.name}</td>
			<td>${user.hp}</td>
			<td>${user.age}</td>
			<td>
				<a href="/ch07/user/modify.do">수정</a>	<!-- 수정할 아이디(파라미터)를 심어놓는 것임 -->
				<a href="/ch07/user/delete.do?uid=${user.uid}">삭제</a> <!-- 삭제할 아이디를 심어놓는 것임 -->
			</td>
		</tr>
		</c:forEach>


3교시) list 나오게끔 -> 삭제페이지 완료

4교시) list -> 수정페이지 완료
-----------------------------------------------------------------------------------------------------
5교시~8교시) hadoop(HDFS) 디스코드서버 캡쳐

- 리눅스 수업자료 / 공유문서에 빅데이터 적재 중 설치 프린트 참고하기

- 201,202,203 yum 다 설치후 poweroff 한 뒤에  네트워크 어댑터2 추가설정해야함

- 201에서 202로 로그인하고 로그아웃하기 (공개키만들기) 셋다 서로 공개키 배포  

- 202 푸티 접속 안되는이유....... 설정 및 방화벽껐는지 확인하기

- 백업해두기 - bigdata폴더 virtual~vm폴더 들어가면 Hadoop201~203을 압축시켜놔

- tar.gz 압축풀기 tar zxvf 파일명


export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk
export PATH=$PATH:$JAVA_HOME/bin
export HADOOP_HOME=/home/bigdata/hadoop
export HADOOP_MAPRED_HOME=$HADOOP_HOME
export HADOOP_COMMON_HOME=$HADOOP_HOME
export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
export HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib/native"
export YARN_HOME=$HADOOP_HOME
export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop
export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop
export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin
export CLASS_PATH=$JAVA_HOME/lib:$CLASS_PATH


<property>
<name>fs.defaultFS</name>
<value>hdfs://bigdata101:9000</value>
</property>
<property>
<name>hadoop.tmp.dir</name>
<value>/home/bigdata/hadoop-2.x.x/tmp</value>
</property>

<property>
<name>dfs.replication</name>
<value>3</value>
</property>
<property>
<name>dfs.permissions</name>
<value>false</value>
</property>
<property>
<name>dfs.webhdfs.enabled</name>
<value>true</value>
</property>



	<property>
		<name>mapreduce.framework.name</name>
		<value>yarn</value>
	</property>



<property>
 <name>yarn.nodemanager.aux-services</name>
 <value>mapreduce_shuffle</value>
 </property>
 <property>
 <name>yarn.nodemanager.aux-services.mapreduce.shuffle.class</name>
 <value>org.apache.hadoop.mapred.ShuffleHandler</value>
 </property>
 <property>
 <name>yarn.resourcemanager.hostname</name>
 <value>bigdata101</value>
 </property>



livenode가 3개가 뜨면 됨


---------------------------------------------------------------------------------------------------- 9/9(목) 6주 4일차
1교시~4교시)

mvc패턴 2 복습하기

1. java패키지에 controller, service, dao, vo 패키지 생성
2. webapp에 register, list, modify.jsp 생성
3. controller - Maincontroller 복붙
4. service - CommonService, RegisterService, ListService, ModifyService  --------- WEB-INF에 lib3개준비, urlMapping.properties에 액션주소 정의,
web.xml에 컨트롤러등록, jsp보안설정, 문자셋 인코딩 필터 등록

- 게시판 할땐 시작페이지까지 추가하겠다.

- 오늘부로 jsp끝!!! jsp교재도 끝내세욤!!!!!!!

- 추석전까지 게시판, 팜스토리 모델2로 진행할것임





	private Map<String, Object> instances = new HashMap<>();
		
	@Override
	public void init(ServletConfig config) throws ServletException {
		
		// 최초 요청 시 실행되는 컨트롤러 초기화 메서드
		System.out.println("MainController init 실행!!!");
		
		// 액션주소 프로퍼티 파일 경로 구하기
		ServletContext ctx = config.getServletContext();
		String path = ctx.getRealPath("/WEB-INF") + "/urlMapping.properties";
		
		// 프로퍼티 파일 입력스트림 연결 후 프로퍼티 객체 생성
		Properties prop = new Properties(); //자료구조(컬렉션)임, key와 value값 모두 String인 컬렉션
		//Map<String, String> map = new HashMap<>(); 얘랑 똑같은 것
		
		try {//Stream은 데이터 이동통로. 
			FileInputStream fis = new FileInputStream(path);
			prop.load(fis);
			fis.close();
			
		}catch(Exception e) {
			e.printStackTrace();
		}
			
		// 프로퍼티 객체로 서비스 객체 생성
		Iterator iter = prop.keySet().iterator(); //자바 자료구조 더 공부하자... prop의 key값들을 Set집합으로 만듬. 순서없으므로 반복자개념활용
		
		while(iter.hasNext()){ //key값 3개밖에 없으니 3번반복하겠지?
			
			String k = iter.next().toString(); //반복적으로 key값을 끄집어냄.
			String v = prop.getProperty(k); //key값을 가지고 value값을 가지고옴.
					
			try {
	
				//HelloService instance1 = new HelloService(); 정적 객체
				
				Class obj = Class.forName(v);
				Object instance = obj.newInstance(); //new객체를 동적으로 생성함. object타입으로 선언함.
		
				instances.put(k, instance);
				
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
	}//init end...
	
	//doGet과 doPost는 공통로직을 가지므로 requestProc메서드 만들어서 호출하는 방식으로!
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		requestProc(req, resp);
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		//req.setCharacterEncoding("utf-8");
		requestProc(req, resp);
	}
	
	//왜 이걸 선언했는지 생각해
	protected void requestProc(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		// 요청주소에서 key 구하기 - hello.do, welcome.do, greeting.do를 구하는 작업. 그게 key니까.
		String path = req.getContextPath();
		String uri = req.getRequestURI();
		String key = uri.substring(path.length());
		
		// Map에서 Service 객체 꺼내기
		
		//***Object instance = instances.get(key); //instance는 object타입. 구체화시키기위해선 다운캐스팅 해줘야함.
		CommonService instance = (CommonService) instances.get(key); //최종 
		//HelloService service = (HelloService) instance; //다운캐스팅 해줘야해 instance객체를 helloservice로 다운캐스팅
		//이렇게 일일히 다 선언해줄 수 없으니 model에 CommonService라는 인터페이스 만들어주자
		//***CommonService service = (CommonService) instance;
 		
		
		// Service 객체 실행 후 결과 정보 리턴 받기
		String result = instance.requestProc(req, resp); //requestProc어디 있는 클래스인지 찾아봐 그럼 리턴값 String view(hello.jsp ...)임을 알 수 있음
		
		if(result.startsWith("redirect:")) {
			//리다이렉트
			//String ctxPath = req.getContextPath(); //리다이렉트에 "/ch07"을 추가하는대신 범용경로를 넣어주는게 좋다
			String redirecUrl = result.substring(9);
			resp.sendRedirect(path+redirecUrl); //위에 path이미 있어서
			
		}else {
			// 해당 View로 forward 하기
			RequestDispatcher dispatcher = req.getRequestDispatcher(result);
			dispatcher.forward(req, resp);
		}
	}
}


----------------------------------------------------------------------------------------------------9/13(월) 7주 1일차

1교시) 패키지명 선언할때 도메인주소 거꾸로 잡아주는게 좋음. (관례적)
2교시)

표현언어는 taglib 필요없음. 
jstl사용할때(<c:foreach같은거....)는  taglib 선언해주고 사용. (lib에 jstl.jar 복붙해넣어야함)


login페이지에서 회원가입 클릭시 terms.do로 링크, TermsService페이지로 가서 작업.  UserDao에 다같이 만들어버리고, TermsVo vo도 생성 후 
Dao를 불러와야지.  Dao에서 selectTerms(){} 만들어야지.
그리고 vo를 return값인 terms.jsp에서도 공유할 것이기 때문에 req.setAttribue("vo",vo)를 선언해줘야하는것임.

Dao에서 selectTerms(){} sql문 만들때 DBConfig를 만들어놓았기 때문에 1~2단계는 이걸로 처리해버려야지...


- 중복체크작업 - json ajax 통신 활용했었음


5교시~8교시) 하둡 !

- 하둡 기동하기 : start-all.sh
- 파일질라로 201에 Python폴더 옮겨넣음
- 하둡 파일시스템에다 옮겨넣음
- 하나의 단일 파일이 실질적으로는 블록으로 쪼개져 저장되어있는 상태. 따라서 웹엥서는 파일내용을 확인할 수 없음

- 로그데이터 : 끊임없이 실시간으로 생성되는 데이터. 하둡이 가장 적합함(많은 용랑 수용가능). 접속내용을 기록한 데이터
용량 크기가 계속 커지겠지...따라서 관리자가 log파일을 적절히 지워줘야 해. 이 때 backup을 해둬야함!!!!!!
logdata를 하둡을 이용해서 flume으로 실시간 수집해서 하둡에 저장해 둠.


- apache flume사이트에서 다운로드 http 링크긁어와서 hadoop201서버에 wget 복붙해서 설치하기 (201이랑 101서버에 각각 설치하기)   

export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk
export FLUME_HOME=/home/bigdata/flume
export FLUME_CONF_DIR=/home/bigdata/flume/conf
export PATH=$PATH:$FLUME_HOME/bin


agent1.sources = execGenSrc
agent1.channels = memoryChannel
agent1.sinks = avroSink
agent1.sources.execGenSrc.type = exec
agent1.sources.execGenSrc.command = tail -f /var/log/httpd/access_log
agent1.sources.execGenSrc.batchSize = 10
agent1.sources.execGenSrc.channels = memoryChannel
agent1.sinks.avroSink.type = avro
agent1.sinks.avroSink.hostname = 192.168.xxx.101(Namenode 주소)
agent1.sinks.avroSink.port = 33333
agent1.sinks.avroSink.batch-size = 10
agent1.sinks.avroSink.channel = memoryChannel
agent1.channels.memoryChannel.type = memory
agent1.channels.memoryChannel.capacity = 100000
agent1.channels.memoryChannel.transactionCapacity = 10000


agent2.sources = avroGenSrc
agent2.channels = memoryChannel
agent2.sinks = HDFS
agent2.sources.avroGenSrc.type = avro
agent2.sources.avroGenSrc.bind = 192.168.xxx.101(Namenode 주소)
agent2.sources.avroGenSrc.port = 33333
agent2.sources.avroGenSrc.channels = memoryChannel
agent2.sinks.HDFS.type = HDFS
agent2.sinks.HDFS.hdfs.path = hdfs://192.168.xxx.101:9000/flume/%Y/%m/%d
agent2.sinks.HDFS.hdfs.fileType = DataStream
agent2.sinks.HDFS.hdfs.writeFormat = text
agent2.sinks.HDFS.hdfs.batchSize = 100
agent2.sinks.HDFS.hdfs.rollSize = 0
agent2.sinks.HDFS.hdfs.rollCount = 10000
agent2.sinks.HDFS.hdfs.rollInterval = 600
agent2.sinks.HDFS.hdfs.useLocalTimeStamp = true
agent2.sinks.HDFS.channel = memoryChannel
agent2.channels.memoryChannel.type = memory
agent2.channels.memoryChannel.capacity = 100000

로그데이터는 센싱데이터, .........

flume만으로는 누락없이 다 수집하기 힘듦. kafka를 flume과 연동시켜 완벽하게 수집하는 것임!

내일 스콥으로 넘어가쟈~!




----------------------------------------------------------------------------------------------------9/14(화) 7주 2일차
1~2교시) 

회원가입 중복체크 및 유효성 검사 작업
로그인, 로그아웃 작업

3~4교시) 

글쓰기 작업

----------------------------------------------------------------------------------------------------
5교시) Scoop

RDB 관계형데이터베이스 : 스케일 업, 더 비쌈, 서비스 제공 위해선 RDB를 써야함. 
HDFS 하둡 : 스케일 아웃(수평 확장),  백업용으로 사용. 

export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk
export SQOOP_HOME=/home/bigdata/sqoop
export SQOOP_CONF_DIR=/home/bigdata/sqoop/conf
export PATH=$PATH:$SQOOP_HOME/bin


---------------------------------------------------------------------------------------------------- 9/15(수) 7주 3일차
1교시)

list작업
- 모델1에서 했던 스크립틀릿 작업을 Service페이지에서 해주면 됨.
- list.jsp의 스크립틀릿 부분을 ListService.jsp페이지 else(로그인을 했을때) 부분에서 작업해주면 됨
일단 articles라는 list객체를 만들어준 뒤 Dao로 가서 selectArticles 작업해주기, sql문 SELECT_ARTICLES도 코드 잘 보기.....
list.do로 접속하면 글 리스트가 쫙 보이겠지?

2교시)

list에 페이지작업
페이지번호그룹핑
모델1과 비교할 것

3~4교시)
list페이지 끝냄

---------------------------------------------------------------------------------------------------- 오후수업
5교시) 리눅스 pdf : 빅데이터 이해와 실습 4. 처리부분!

102번서버와 201번으로 작업 시작.
Weather.py를 102에 배포한 후 

hdfs dfs -mkdir /weather 로 폴더 만들고

102안에 있는 2021-09-15 폴더를 201의 weather폴더 안으로 copy하는 작업. :  scp -r ./weather/2021-09-15/ root@192.168.56.201:/root/weather 

201에서 하둡으로 put하는 작업. hdfs dfs -put 2021-09-15/ /weather

102서버와 201서버를 공개키 생성 후 배포하는 작업해야함

102번 서버에서 vi move_to_namenode.sh 생성해서 (201번서버로 자동으로 넘어가게끔 설정하는 작업)
#!/bin/sh
date=$(date +%Y-%m-%d -d '-1days')
echo $date
#scp    -r      ./weather/$date root@192.168.56.201:/root/weather/
exit 0

- chmod 755 move_to_namenode.sh

- ./move_to_namenode.sh 이 명령어가 뭔데? 


6교시) 4장 빅데이터 처리/탐색
- 적재된 데이터를 가공하고 이해하는 단계
- data lake: 제일 큰 개념. Hadoop(hdfs), nosql(hbase)도  여기에 해당됨.
- data warehouse: 데이터베이스의 상위개념
- data mart: warehouse에서 파생된 소규모의 데이터베이스. warehouse의 하위개념

***********중요!****************
- MapReduce : 맵리듀스 분산처리(블록단위로 쪼개서 저장) 하둡에 저장된 통합 201에 하나인 것처럼보이지만 201,202,203에 쪼개져서 블록으로 저장됨.
각 노드에서 해당 블록파일을 각각 처리(지역성locality) 


7교시) java로 MapReduce 실습해보기

workspace에 java로 이클립스 열어
WordCount라는 패키지 생성 후 
- WordCountMain, Mapper, Reducer 각 클래스 생성
- maven repository에서 hadoop 검색 - hadoop core 1.2.1버전 jar 파일 다운로드하여 lib에 추가
- java는 lib 자동인식안되므로 우버튼 build path - Configure build path 에 add external jars로 받은 hadoop-core.jar 추가
- 다 작성 후 WordCount 우버튼 export시켜 java에 jar로, 바탕화면 설정 WordCount.jar로 export.
- 파일질라로 201서버 root에 복붙.
- 201서버에 WordCount.jar 생겼는지 ll확인
- hdfs dfs -mkdir /MapReduce 로 하둡에 MapReduce 폴더 생성
- vi sample.txt로 열어 위키 빅데이터 내용  복붙
- hdfs dfs -put sample.txt /MapReduce 로 하둡에 MapReduce폴더 안에 sample.txt를 넣자
- yarn jar WordCount.jar mapreduce.WordCountMain /MapReduce/sample.txt /MapReduce/output 명령어 때리면 하둡에 output 폴더 생성
- output 폴더 안에 있는 part-r-00000을 get 해와서 열어보면 캡쳐본에 Fianl result인 Bear.2, Car.2, Deer.2, River.2가 있는 것임!!!!!!!!!! 

태블릿캡쳐와 디스코드 시현 서버 캡쳐 둘다 확인할것

8교시) 복습.



---------------------------------------------------------------------------------------------------- 9/16(목) 7주 4일차
1교시) list 및 view까지 완료 - 1차개발완료

댓글 2차개발 시작.

2교시~4교시) 댓글 부분 2차 개발 

5교시) 오늘밤 12시 1분에 201의 namenode로 복사될것임. 201의 put_to_~는 102로 12시 2분에 복사되게끔 설정

vi /etc/crontab 들어가서 설정해주기 2 0 * * *~~~이거 있잖아 시간설정 및 시간되면 복사작업해라는 설정

-------------------------- 오늘 수업의 하이라이트는 hive임.....

- workbook에 순서대로 따라하면 됨. ( 빅데이터의 이해와 실습 3. 처리 .pdf )

mysql>CREATE DATABASE hive_metastore_db;
mysql>CREATE USER 'hive'@'localhost' IDENTIFIED BY '1234';
mysql>CREATE USER 'hive'@'%' IDENTIFIED BY '1234';
mysql>GRANT ALL ON *.* TO 'hive'@'localhost' IDENTIFIED BY '1234';
mysql>GRANT ALL ON *.* TO 'hive'@'%' IDENTIFIED BY '1234';
mysql>FLUSH PRIVILEGES;
mysql>exit

export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk
export HIVE_HOME=/home/bigdata/hive
export PATH=$PATH:$HIVE_HOME/bin

<configuration>
<property>
<name>hive.metastore.warehouse.dir</name>
<value>/hive/warehouse</value>
</property>
<property>
<name>javax.jdo.option.ConnectionURL</name>
<value>jdbc:mysql://localhost:3306/hive_metastore_db?
createDatabaseIfNotExist=true</value>
</property>
<property>
<name>javax.jdo.option.ConnectionDriverName</name>
<value>com.mysql.jdbc.Driver</value>
</property>
<property>
<name>javax.jdo.option.ConnectionUserName</name>
<value>hive</value>
</property>
<property>
<name>javax.jdo.option.ConnectionPassword</name>
<value>1234</value>
</property>
</configuration>

shift v g -> d 전체삭제


hive실행은 그냥 hive치면됨 종료는 exit;


CREATE TABLE `WordcountResult` AS SELECT `word`, COUNT(1) FROM (SELECT explode(split(text, ' ')) AS `word` FROM `Wordcount`)W
    > GROUP BY `word` ORDER BY `word`;




CREATE TABLE 'Busan' AS SELECT `word`, COUNT(1) FROM (SELECT '부산' AS `var1` FROM `Weather1`)W;


hive 다운받아야함!!!!!!!!!!!!!!!






CREATE EXTERNAL TABLE Weather (
var1 String,
var2 String,
var3 String,
var4 Int,
var5 Int,
var6 Double,
var7 Double,
var8 Double,
var9 Double,
var10 Int,
var11 String
,
var12 Double,
var13 Double
)
row format delimited
fields terminated by ","
location "/weather/2021-09-16/" 
tblproperties("skip.header.line.count"="0");


---------------------------------------------------------------------------------------------------- 9/23(목) 8주 1일차 (추석연휴끝)
1교시) 팜스토리3 모델2 실습 start!

- 구글드라이브 공유문서 게시판UI 다운로드 - jsp변환 - run on server

- java에 패키지들 만들기 (kr.co.farmstory3.controller, service, dao, vo), MainController와 CommonService, vo들도 복붙

- urlMapping.properties도 복붙해서 수정 ; (디코캡쳐) 

2교시) 팜스토리3 모델2 실습ing

- 시작페이지, 메인페이지 구별하자. index는 메인페이지임.
web.xml 작업
시작페이지 _index.jsp로 설정 
메인페이지  index.jsp

- 스타일 정의 : Jboard2의 style.css를 보면 user.~로 정의되어있음 복붙, 게시판부분 board.~도 복붙.

- index.jsp 포워드시켜주기

- include작업 (header, footer등을 각각 페이지에 include시키기) header는 당근 index페이지에서 만들어줘야지, index페이지도 header, footer로 삽입


3교시) 팜스토리3 모델2 실습ing

- aside작업 시작... 얘는 어떻게 <% ~~~~%> 표현을 바꿔표현할수있을까? Service페이지를 만들어야할까? 일단 스크립틀릿 다 지우고, 
aside페이지 만들어주고, list에 jsp include page ${includeFile}해주고! a



- aside페이지는 새로 만들어보자 hello페이지를 가지고 _asideCommuinty 만들고나서 list.jsp에서 아래 위로 작업해주기
- css에 안되어있는 작업들 해야함.


-list페이지에 <jsp:include page="${includeFile}"></jsp:include>추가하고 listService페이지에서 includeFile 만들어주면 됨


4교시) 
- listService페이지에 String group = req.getParameter("group");
		String includeFile = "./_aside"+group+".jsp";
		
		req.setAttribute("includeFile", includeFile);

- _header에두 group 작업해주기

- listService페이지에 결국 cate도 추가해줘야하지!
group과 cate 추가.....

- 각 aside페이지에서 어떤 작업을 해야하는지...

- list, view, write페이지도 작업해주기 (과제)

-------------------------------------------------------------------
5교시~8교시) spark
- 하이브는 맵리듀스 활용, 성능이 만족스럽지 못함. 실시간, 반복적인 대화형 연산 작업에서는 하이브가 적합하지 않고 이런 단점을 극복하기 위해
Spark가 등장! 하이브는 하둡에 연동.

- 스파크는 RDBM, 몽고DB 등과 연동이 됨. 다양한 데이터소스(HDFS, Local, Hbase)를 연동할 수 있음. 고성능 인메모리 분석임.
데이터를 가공처리하기 위해 메모리에 상주시켜 

- 하둡 시스템은 24시간돌아가니까 데이터가 날라갈리가 없음

- 인메모리 데이터베이스도 있음

- 더이상은 RDD를 안써

- DataFrame으로 대부분 처리가 이루어짐. R언어도 얘를 활용. 행과 열로 이루어진 테이블 자료구조라 생각하면 됨.

export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk
export SPARK_HOME=/home/bigdata/spark
export PATH=$PATH:$SPARK_HOME/bin

- partition자체가 각각 다른 노드(201, 202, 203)에 저장되어있으나 RDD에서는 하나의 단일구조임.

- list에 대한 일괄처리할때 파이썬map 활용함

- dataframe은 스파크의 아주 유명한 자료구조임

- heidisql 켜서 sale이랑 user2 csv 파일로 도구 격자행 내보내기 - 파일로 저장

- hive보다 훨씬 빠르네 spark... 그래서 hive보다 훨 많이 씀

- hive는 하둡에 국한되지만 spark는 오라클, 몽고디비, mysql등등과도 연동이 되므로 훨씬 많이 쓰이겠지!!!

- spark는 RDD는 별로 안중요한데, DataFrame은 중요함!

- spark의 scala함수안에선 update문이나 insert문은 사용할 수 없음


---------------------------------------------------------------------------------------------------- 9/27(월) 9주 1일차 
1교시) 쇼핑몰은 다음주부터, 이번주는 오전 R 프로그래밍 진행할것임. 오후는 빅데이터분석기사 기출문제 풀이

- 빅데이터 분석 : R - 데이터 통계 및 분석을 위한 프로그래밍언어 / Python - 머신러닝, 딥러닝 쪽은 파이선으로
- R설치하기 : 자바의 가상머신같은 것. 
-   <- 가 대입연산자
- R studio설치하기 : R은 너무 기본적인 것들만 가능하므로. 통합개발환경도구. product - rstudio- desktop free version 다운로드
-workspace에서 R폴더 만든 후 rstudio에서 새로운 project만들면서 경로잡아주기, r script새로만들기

-ctrl+enter로 각 라인별 단위실행해주거나 블록설정 후 ctrl+enter 해주기
- 자료형 타입 선언이나 ;도 표시해주지 않음


-2_4 dataFrame이 제일 중요, $는 참조표시

자료구조 5개 중에서 Vector와 DataFrame이 가장 중요

- R 책 예제 끝내기 (과제) 2~3장


---------------------------------------------------------------------------------------------------- 9/28(화) 9주 2일차
오전) R 4~5장
- ,로 구분된 자료는 csv파일
- R과 Python둘다 할줄알아야...


---------------------------------------------------------------------------------------------------- 9/29(수) 9주 3일차
오전) R 6장~7장

---------------------------------------------------------------------------------------------------- 9/29(목) 9주 4일차
오전) R 8장~9장
오후) 이번주 오후는 내내 빅데이터분석기사 필기 시험 준비함




----------------------------------------------------------------------------------------------------10/4(월) 10주 1일차
쇼핑몰 시작 >>>>>>>>>>>>>>>>>>>>>>>> http://54.180.160.240/kmarket/index.html




margin: 0 auto; 가운데정렬
text-align: 로그인회원가입~~~ 오른쪽정렬

fontawesome사이트에서 장바구니 아이콘 다운로드 받자

오후) 빅데이터 다운로드받다가 시간 너무 오래걸려서
html 태그들 정리수업해주심 (vscode에 study폴더에 display, position, float)

----------------------------------------------------------------------------------------------------10/5(화) 10주 2일차

오전 ) kmarket/shop/6개 페이지 vscode로 코딩... 개발도구 활용해서 벤치마킹

오후 ) 실무로 배우는 빅데이터 기술 - VM 18G 다운받은걸 가상머신 통해서 추가하여 실행.
교재 & PDF(빅데이터 파일럿 프로젝트 수정) 참고하여 진행

- 가상머신 실행 부팅시킨 후 (server01,02 그리고 putty server01)
- 192.168.56.101:7180/ 실행 (클라우데라 매니져) admin / admin으로 로그인
- 클라우데라가 빅데이터 플랫폼! 
- 푸티 server01 로그인은 root / adminuser로...
- 차량 상태 정보와 운전자 운행 정보를 18G짜리 빅데이터 파일럿 시스템에 수집, 적재, 처리/탐색 및 분석/응용 하는 것임
- pdf의 CM은 클라우데라 매니저
- 차량에서 발생하는 로그파일들을 이 빅데이터 파일럿 시스템이 수집 및 적재, 처리하여 기능별 상태를 점검하고
주행 패턴을 분석하기 위함.
- 하둡은 일단위 수집, HBase는 실시간으로 바로 수집
- 빅데이터 파일럿 시스템의 아키텍쳐를 이해하자 - flume이 수집하여 HBase에 적재하면
	Hive, Hue, Spark, Oozie, Sqoop 등이 처리를 해줄것임. 
	Zookeeper는 모든 과정, HDFS는 적재부터 분석까지 다양한 역할을 하네

- 파일럿 프로젝트 하드웨어 구성 :  우리는 VM server01, server02 2대로 돌리고 있음
- 파일럿 프로젝트 소프트웨어 구성 : 빅데이터 자동화 솔루션인 클라우데라 매니저(CM)를 통해서 모든 에코시스템 17개를 편리하게 설치 및 관리함
 Flume, Hbase, Hive, Spark, Oozie, ...........


- p12를 통해서 CM 설치작업





----------------------------------------------------------------------------------------------------10/6(수) 10주 3일차

오전) Kmarket member쪽 완성하기

오후) 빅데이터 클라우데라 실습

교재 and pdf 수정파일로 진행

하이브 zZFXX5JtbN
휴3 65ae2QAM2R

----------------------------------------------------------------------------------------------------10/7(목) 10주 4일차

오전) admin- index.html 같이 관리자 등록페이지 작업하기 (대부분 모든 쇼핑몰의 관리자 페이지는 이 형식과 동일함)

- 디자인 작업 시 border: 1px solid blue 등와 box-sizing넣어서 보면서 작업해야 함
- include작업은 개발때 해야함 html에는 include문법이 없거든...

- 

오후) 클라우데라 실습

데이터 분석할 줄 알아야 함 (파일질라로 로그데이터 PC로 옮겨 노트패드로 열었을때 csv파일형식이잖아(ㅇㅇ,ㅇㅇ,ㅇㅇ,ㅇㅇㅇㅇ) 
- 2021100100시00분00초, 차량번호, 4초단위로 수집했네.... 데이터 총 210만건정도네..... 총 차량 100대 (명령어 100 &라고 선언했잖아)
하둡 - 1일단위로 생성됨 
flume이 수집해서 하둡으로 보냄

**************************************************************************
< hbase 적재일 - 개수 >
20211007 - 50795개
20211008 - 몇개인지 확인모대따.....
20211011 - 386290

**************************************************************************
<총정리>
실무로 배우는 빅데이터 기술 - VM 18G 다운받은걸 가상머신 통해서 추가하여 실행.
교재 & PDF(빅데이터 파일럿 프로젝트 수정) 참고하여 진행

- 가상머신 실행 부팅시킨 후 (server01,02 그리고 putty server01)
- 192.168.56.101:7180/ 실행 (클라우데라 매니져) admin / admin으로 로그인
- 클라우데라가 빅데이터 플랫폼! 
- 푸티 server01 로그인은 root / adminuser로...
- 차량 상태 정보와 운전자 운행 정보를 18G짜리 빅데이터 파일럿 시스템에 수집, 적재, 처리/탐색 및 분석/응용 하는 것임
- pdf의 CM은 클라우데라 매니저
- 차량에서 발생하는 로그파일들을 이 빅데이터 파일럿 시스템이 수집 및 적재, 처리하여 기능별 상태를 점검하고
주행 패턴을 분석하기 위함.
- 하둡은 일단위 수집, HBase는 실시간으로 바로 수집
- 빅데이터 파일럿 시스템의 아키텍쳐를 이해하자 - flume이 수집하여 HBase에 적재하면
	Hive, Hue, Spark, Oozie, Sqoop 등이 처리를 해줄것임. 
	Zookeeper는 모든 과정, HDFS는 적재부터 분석까지 다양한 역할을 하네

- 파일럿 프로젝트 하드웨어 구성 :  우리는 VM server01, server02 2대로 돌리고 있음
- 파일럿 프로젝트 소프트웨어 구성 : 빅데이터 자동화 솔루션인 클라우데라 매니저(CM)를 통해서 모든 에코시스템 17개를 편리하게 설치 및 관리함
 Flume, Hbase, Hive, Spark, Oozie, ...........
- 공유문서 설정매뉴얼에 가면 [Bigdata]로 설정매뉴얼들 있으니 참고하기

- p12를 통해서 CM 설치작업 but 우리는 이미 다 설치되어 있었으므로 가상머신2개, putty server01 실행 후 
192.168.56.101:7180으로 들어가면 CM 바로 실행됨

- CM 클러스터 설치하기 - 사용자지정으로 HDFS, Cloudera Managementm Service, YARN, Zookeeper 먼저 설치

- p16 로그 시뮬레이터 실행하기 (무조건 kill -9해야함)

- p18 수집부터 시작 (Flume설치)
- p21 적재 (Hadoop 및 HBase설치)
- p24 Hue설치가 좀 애먹음 (무조건 hive먼저 설치한 뒤 hue설치가능)
- 적재 테스트 해서 Hue(192.168.56.101:8888)에서 확인하기
- p29 처리/탐색 파트에서는 Spark와 Oozie 설치하고 구성 설정해주고 재시작하면됨.
- p32까지 처리탐색테스트로 완료

- 항상 CM은 2개 중지 먹이고 푸티 logout, 가상머신 poweroff 순서로 종료해야함


----------------------------------------------------------------------------------------------------10/8(금) 10주 5일차
오전) 수행평가
오후) 코딩테스트


매일 HBase 적재하기

------------------------------------------------------------------------------------------------------10/11(월) 11주 1일차
오전)

이클립스 help - market - sts - spring tools 3 (standalon Edition)다운받아 설정
spring은 도구니까 익힐것. 이해하려고하면 어렵긴함...
프레임워크 - 라이브러리 덩어리, 뼈대
spring도 프레임워크임.
maincontroller 시스템의 하부구조를 spring은 구현해줌.
spring으로 개발패턴을 익히면 됨.
Spring의 경량화 -----> Spring Boot
Spring - Spring Legacy Project - Ch01 - Spring MVC Project - 이렇게 시도했는데 오류났음.........그래서 spring싸이트가서 spring tool3 직접 다운받음


대규모 프로젝트(수백페이지) 개발 = 엔터프라이즈 개발
POJO - Java언어를 기반으로 함
<Spring 삼각형>
Dependency injection - Ioc = DI
+
AOP : 관점 지향 프로그래밍    cf. OOP : 객체 지향 프로그래밍
+
PSA : 서비스 추상화

- tomcat 서버 포트 바꾸기 : Servers - server.xml - port8080을 다른 포트번호로 변경

- IoC는 개념, DI는 그 개념을 구현하는 기술
- 제어의 역행이란건 객체를 주입 받는다는 뜻 (싱글톤 객체와 비슷하네)
- spring 버전 4.3.30으로 바꾸기 : pom.xml (스프링에서 라이브러리 관리는 모두 pom.xml에서 함)
- src - main - webapp - WEB-INF - spring - appServlet - servlet-context.xml 에서
<context:component-scan base-package="sub1" /> 추가

-src/main/resources ---- root-context.xml ---- 추가해주기 
					(<bean id="ltv" class="sub1.LgTV"></bean>
					<bean id="stv" class="sub1.SamsungTV"></bean>)

- @Autowired나 @Inject는 결국 spring container에서 ltv, stv라는 변수를 객체화시켜주는 어노테이션
- s표시는 스프링 컨테이너에 등록되어 있다는 뜻!
- Spring container가 항상 annotation이 있는지 없는지 감시하고 있음
- new 객체 선언하지 않고 @autowired나 @inject활용하면 됨



--------------------------------------------------------------------------
오후) 빅데이터 파일럿 프로젝트 수정.pdf  p33~34 

- 데이터셋 추가/탐색하기 p33~34
- 교재 p256 스파크도 실습해보기
- 



create table if not exists Managed_SmartCar_Status_Info (
    car_number string,
    sex string,
    age string,
    marriage string,
    region string,
    job string,
    car_capacity string,
    car_year string,
    car_model string,
    tire_fl string,
    tire_fr string,
    tire_bl string,
    tire_br string,
    light_fl string,
    light_fr string,
    light_bl string,
    light_br string,
    engine string,
    break string,
    battery string,
    reg_date string
)
partitioned by (biz_date string)
row format delimited
fields terminated by ','
stored as textfile;


alter table smartcar_status_info
add if not exists partition(wrk_date='${working_day');



set hive.exec.dynamic.partition=true;
set hive.exec.dynamic.partition.mode=nonstrict;

INSERT OVERWRITE TABLE Managed_SmartCar_Status_Info PARTITION(biz_date)
SELECT
    t1.car_number,
    t1.sex,
    t1.age,
    t1.marriage,
    t1.region,
    t1.job,
    t1.car_capacity,
    t1.car_year,
    t1.car_model,
    t2.tire_fl,
    t2.tire_fr,
    t2.tire_bl,
    t2.tire_br,
    t2.light_fl,
    t2.light_fr,
    t2.light_bl,
    t2.light_br,
    t2.engine,
    t2.break,
    t2.battery,
    t2.reg_date,
    substring(t2.reg_date, 0, 8) as biz_date
FROM smartcar_master_over18 t1
join smartcar_status_info t2
on t1.car_number = t2.car_number
and t2.wrk_date = '${working_day}';



*********************** 메인에 Hue 우버튼 - 구성에 Oozie체크해줘야 Hue에 쿼리 밑에 스케줄러 버튼이 생김!!! ***********************

- p37~42 휴로 우지 작업하기


- 새벽1시에 workflow 실행시켜 datamart를 만드는 것임.
